<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CachingFramework.Redis.StrongName</name>
    </assembly>
    <members>
        <member name="T:CachingFramework.Redis.Contracts.BitfieldType">
            <summary>
            Enum BitfieldType
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u1">
            <summary>Unsigned integer of 1 bit. (0 to 1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u2">
            <summary>Unsigned integer of 2 bits. (0 to 3).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u3">
            <summary>Unsigned integer of 3 bits. (0 to 7).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u4">
            <summary>Unsigned integer of 4 bits. (0 to 15).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u5">
            <summary>Unsigned integer of 5 bits. (0 to 31).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u6">
            <summary>Unsigned integer of 6 bits. (0 to 63).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u7">
            <summary>Unsigned integer of 7 bits. (0 to 127).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u8">
            <summary>Unsigned integer of 8 bits. (0 to 255). (System.Byte .NET equivalent)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u9">
            <summary>Unsigned integer of 9 bits. (0 to 511).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u10">
            <summary>Unsigned integer of 10 bits. (0 to 1023).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u11">
            <summary>Unsigned integer of 11 bits. (0 to 2047).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u12">
            <summary>Unsigned integer of 12 bits. (0 to 4095).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u13">
            <summary>Unsigned integer of 13 bits. (0 to 8191).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u14">
            <summary>Unsigned integer of 14 bits. (0 to 16383).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u15">
            <summary>Unsigned integer of 15 bits. (0 to 32767).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u16">
            <summary>Unsigned integer of 16 bits. (0 to 65535). (System.UInt16 .NET equivalent)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u17">
            <summary>Unsigned integer of 17 bits. (0 to 2^17-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u18">
            <summary>Unsigned integer of 18 bits. (0 to 2^18-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u19">
            <summary>Unsigned integer of 19 bits. (0 to 2^19-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u20">
            <summary>Unsigned integer of 20 bits. (0 to 2^20-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u21">
            <summary>Unsigned integer of 21 bits. (0 to 2^21-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u22">
            <summary>Unsigned integer of 22 bits. (0 to 2^22-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u23">
            <summary>Unsigned integer of 23 bits. (0 to 2^23-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u24">
            <summary>Unsigned integer of 24 bits. (0 to 2^24-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u25">
            <summary>Unsigned integer of 25 bits. (0 to 2^25-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u26">
            <summary>Unsigned integer of 26 bits. (0 to 2^26-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u27">
            <summary>Unsigned integer of 27 bits. (0 to 2^27-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u28">
            <summary>Unsigned integer of 28 bits. (0 to 2^28-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u29">
            <summary>Unsigned integer of 29 bits. (0 to 2^29-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u30">
            <summary>Unsigned integer of 30 bits. (0 to 2^30-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u31">
            <summary>Unsigned integer of 31 bits. (0 to 2^31-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u32">
            <summary>Unsigned integer of 32 bits. (0 to 2^32-1). (System.UInt32 .NET equivalent)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u33">
            <summary>Unsigned integer of 33 bits. (0 to 2^33-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u34">
            <summary>Unsigned integer of 34 bits. (0 to 2^34-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u35">
            <summary>Unsigned integer of 35 bits. (0 to 2^35-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u36">
            <summary>Unsigned integer of 36 bits. (0 to 2^36-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u37">
            <summary>Unsigned integer of 37 bits. (0 to 2^37-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u38">
            <summary>Unsigned integer of 38 bits. (0 to 2^38-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u39">
            <summary>Unsigned integer of 39 bits. (0 to 2^39-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u40">
            <summary>Unsigned integer of 40 bits. (0 to 2^40-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u41">
            <summary>Unsigned integer of 41 bits. (0 to 2^41-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u42">
            <summary>Unsigned integer of 42 bits. (0 to 2^42-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u43">
            <summary>Unsigned integer of 43 bits. (0 to 2^43-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u44">
            <summary>Unsigned integer of 44 bits. (0 to 2^44-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u45">
            <summary>Unsigned integer of 45 bits. (0 to 2^45-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u46">
            <summary>Unsigned integer of 46 bits. (0 to 2^46-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u47">
            <summary>Unsigned integer of 47 bits. (0 to 2^47-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u48">
            <summary>Unsigned integer of 48 bits. (0 to 2^48-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u49">
            <summary>Unsigned integer of 49 bits. (0 to 2^49-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u50">
            <summary>Unsigned integer of 50 bits. (0 to 2^50-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u51">
            <summary>Unsigned integer of 51 bits. (0 to 2^51-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u52">
            <summary>Unsigned integer of 52 bits. (0 to 2^52-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u53">
            <summary>Unsigned integer of 53 bits. (0 to 2^53-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u54">
            <summary>Unsigned integer of 54 bits. (0 to 2^54-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u55">
            <summary>Unsigned integer of 55 bits. (0 to 2^55-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u56">
            <summary>Unsigned integer of 56 bits. (0 to 2^56-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u57">
            <summary>Unsigned integer of 57 bits. (0 to 2^57-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u58">
            <summary>Unsigned integer of 58 bits. (0 to 2^58-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u59">
            <summary>Unsigned integer of 59 bits. (0 to 2^59-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u60">
            <summary>Unsigned integer of 60 bits. (0 to 2^60-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u61">
            <summary>Unsigned integer of 61 bits. (0 to 2^61-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u62">
            <summary>Unsigned integer of 62 bits. (0 to 2^62-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.u63">
            <summary>Unsigned integer of 63 bits. (0 to 2^63-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i1">
            <summary>Signed integer of 1 bit. (-1 to 0).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i2">
            <summary>Signed integer of 2 bits. (-2 to 1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i3">
            <summary>Signed integer of 3 bits. (-4 to 3).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i4">
            <summary>Signed integer of 4 bits. (-8 to 7).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i5">
            <summary>Signed integer of 5 bits. (-16 to 15).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i6">
            <summary>Signed integer of 6 bits. (-32 to 31).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i7">
            <summary>Signed integer of 7 bits. (-64 to 63).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i8">
            <summary>Signed integer of 8 bits. (-128 to 127). (System.SByte .NET equivalent)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i9">
            <summary>Signed integer of 9 bits. (-256 to 255).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i10">
            <summary>Signed integer of 10 bits. (-512 to 511).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i11">
            <summary>Signed integer of 11 bits. (-1024 to 1023).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i12">
            <summary>Signed integer of 12 bits. (-2048 to 2047).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i13">
            <summary>Signed integer of 13 bits. (-4096 to 4095).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i14">
            <summary>Signed integer of 14 bits. (-8192 to 8191).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i15">
            <summary>Signed integer of 15 bits. (-16384 to 16383).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i16">
            <summary>Signed integer of 16 bits. (-32768 to 32767). (System.Int16 .NET equivalent)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i17">
            <summary>Signed integer of 17 bits. (-65536 to 65535).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i18">
            <summary>Signed integer of 18 bits. (-2^18/2 to 2^18/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i19">
            <summary>Signed integer of 19 bits. (-2^19/2 to 2^19/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i20">
            <summary>Signed integer of 20 bits. (-2^20/2 to 2^20/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i21">
            <summary>Signed integer of 21 bits. (-2^21/2 to 2^21/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i22">
            <summary>Signed integer of 22 bits. (-2^22/2 to 2^22/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i23">
            <summary>Signed integer of 23 bits. (-2^23/2 to 2^23/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i24">
            <summary>Signed integer of 24 bits. (-2^24/2 to 2^24/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i25">
            <summary>Signed integer of 25 bits. (-2^25/2 to 2^25/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i26">
            <summary>Signed integer of 26 bits. (-2^26/2 to 2^26/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i27">
            <summary>Signed integer of 27 bits. (-2^27/2 to 2^27/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i28">
            <summary>Signed integer of 28 bits. (-2^28/2 to 2^28/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i29">
            <summary>Signed integer of 29 bits. (-2^29/2 to 2^29/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i30">
            <summary>Signed integer of 30 bits. (-2^30/2 to 2^30/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i31">
            <summary>Signed integer of 31 bits. (-2^31/2 to 2^31/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i32">
            <summary>Signed integer of 32 bits. (-2^32/2 to 2^32/2-1). (System.Int32 .NET equivalent)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i33">
            <summary>Signed integer of 33 bits. (-2^33/2 to 2^33/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i34">
            <summary>Signed integer of 34 bits. (-2^34/2 to 2^34/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i35">
            <summary>Signed integer of 35 bits. (-2^35/2 to 2^35/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i36">
            <summary>Signed integer of 36 bits. (-2^36/2 to 2^36/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i37">
            <summary>Signed integer of 37 bits. (-2^37/2 to 2^37/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i38">
            <summary>Signed integer of 38 bits. (-2^38/2 to 2^38/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i39">
            <summary>Signed integer of 39 bits. (-2^39/2 to 2^39/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i40">
            <summary>Signed integer of 40 bits. (-2^40/2 to 2^40/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i41">
            <summary>Signed integer of 41 bits. (-2^41/2 to 2^41/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i42">
            <summary>Signed integer of 42 bits. (-2^42/2 to 2^42/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i43">
            <summary>Signed integer of 43 bits. (-2^43/2 to 2^43/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i44">
            <summary>Signed integer of 44 bits. (-2^44/2 to 2^44/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i45">
            <summary>Signed integer of 45 bits. (-2^45/2 to 2^45/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i46">
            <summary>Signed integer of 46 bits. (-2^46/2 to 2^46/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i47">
            <summary>Signed integer of 47 bits. (-2^47/2 to 2^47/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i48">
            <summary>Signed integer of 48 bits. (-2^48/2 to 2^48/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i49">
            <summary>Signed integer of 49 bits. (-2^49/2 to 2^49/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i50">
            <summary>Signed integer of 50 bits. (-2^50/2 to 2^50/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i51">
            <summary>Signed integer of 51 bits. (-2^51/2 to 2^51/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i52">
            <summary>Signed integer of 52 bits. (-2^52/2 to 2^52/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i53">
            <summary>Signed integer of 53 bits. (-2^53/2 to 2^53/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i54">
            <summary>Signed integer of 54 bits. (-2^54/2 to 2^54/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i55">
            <summary>Signed integer of 55 bits. (-2^55/2 to 2^55/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i56">
            <summary>Signed integer of 56 bits. (-2^56/2 to 2^56/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i57">
            <summary>Signed integer of 57 bits. (-2^57/2 to 2^57/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i58">
            <summary>Signed integer of 58 bits. (-2^58/2 to 2^58/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i59">
            <summary>Signed integer of 59 bits. (-2^59/2 to 2^59/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i60">
            <summary>Signed integer of 60 bits. (-2^60/2 to 2^60/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i61">
            <summary>Signed integer of 61 bits. (-2^61/2 to 2^61/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i62">
            <summary>Signed integer of 62 bits. (-2^62/2 to 2^62/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i63">
            <summary>Signed integer of 63 bits. (-2^63/2 to 2^63/2-1).</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.BitfieldType.i64">
            <summary>Signed integer of 64 bits. (-2^64/2 to 2^64/2-1). (System.Int64 .NET equivalent)</summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.GeoCoordinate">
            <summary>
            Class representing a position in Latitude/Longitude terms.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.GeoCoordinate.Latitude">
            <summary>
            Gets the latitude.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.GeoCoordinate.Longitude">
            <summary>
            Gets the longitude.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.GeoCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Contracts.GeoCoordinate"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.GeoCoordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.GeoMember`1">
            <summary>
            Represents a member of type T with geospatial information (coordinates and distance)
            </summary>
            <typeparam name="T">The member type.</typeparam>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.GeoMember`1.DistanceToCenter">
            <summary>
            Gets or sets the distance to center.
            </summary>
            <value>The distance to center.</value>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.GeoMember`1.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.GeoMember`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.GeoMember`1.#ctor(CachingFramework.Redis.Contracts.GeoCoordinate,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Contracts.GeoMember`1"/> class.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.GeoMember`1.#ctor(System.Double,System.Double,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Contracts.GeoMember`1"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.GeoMember`1.#ctor(System.Double,System.Double,`0,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Contracts.GeoMember`1"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="value">The value.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.IContext">
            <summary>
            Interface for Context class containing the public APIs.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.IContext.Cache">
            <summary>
            Gets the cache API.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.IContext.Collections">
            <summary>
            Gets the collection API.
            </summary>
            <value>The collections.</value>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.IContext.GeoSpatial">
            <summary>
            Gets the geo spatial API.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.IContext.PubSub">
            <summary>
            Gets the pub sub API.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.IContext.KeyEvents">
            <summary>
            Gets the Key/Event space notifications API.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.IContext.GetSerializer">
            <summary>
            Gets the serializer for this context.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.ISerializer">
            <summary>
            Interface that defines serialization/deserialization generic methods to be used by the cache engine
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.ISerializer.Serialize``1(``0)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.ISerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.OverflowType">
            <summary>
            Enum OverflowType
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.OverflowType.Wrap">
            <summary>
            Wrap around, this also works for signed integers, by wrapping towards the most negative or most positive values.
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.OverflowType.Saturation">
            <summary>
            Saturation, so that overflowing in one direction or the other, will saturate the integer to its maximum value in the direction of the overflow.
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.OverflowType.Fail">
            <summary>
            The operation is not performed if the value would overflow.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Providers.ICacheProvider">
            <summary>
            Cache Provider internal contract
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FetchHashed``1(System.String,System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FetchHashed``1(System.String,System.String,System.Func{``0},System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field, and associates the field to the given tags.
            If there is data in the cache with the given key, then that data is returned, and the last three parameters are ignored.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FetchHashed``1(System.String,System.String,System.Func{``0},System.Func{``0,System.String[]},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field, and associates the field to the tags returned by the given tag builder.
            If there is data in the cache with the given key, then that data is returned, and the last three parameters are ignored.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tagsBuilder">The tags builder to specify tags depending on the value.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FetchObject``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FetchObject``1(System.String,System.Func{``0},System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tags">The tags to associate with the key. Only associated when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FetchObject``1(System.String,System.Func{``0},System.Func{``0,System.String[]},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tagsBuilder">The tag builder to associte tags depending on the value.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetObject``1(System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Set the value of a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="ttl">The expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetObject``1(System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Set the value of a key, associating the key with the given tag(s).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="tags">The tags.</param>
            <param name="ttl">The time to live.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetSetObject``1(System.String,``0)">
            <summary>
            Atomically sets key to value and returns the old value stored at key. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The new value value.</param>
            <returns>The old value</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.AddTagsToKey(System.String,System.String[])">
            <summary>
            Relates the given tags to a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RenameTagForKey(System.String,System.String,System.String)">
            <summary>
            Renames a tag related to a key.
            If the current tag is not related to the key, no operation is performed.
            If the current tag is related to the key, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The key related to the tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.AddTagsToHashField(System.String,System.String,System.String[])">
            <summary>
            Relates the given tags to a field inside a hash key.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.AddTagsToSetMember``1(System.String,``0,System.String[])">
            <summary>
            Relates the given tags to a member inside a redis set, sorted set or geospatial index.
            </summary>
            <param name="key">The redis set, sorted set or geospatial index key.</param>
            <param name="member">The set member.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RenameTagForHashField(System.String,System.String,System.String,System.String)">
            <summary>
            Renames a tag related to a hash field.
            If the current tag is not related to the hash field, no operation is performed.
            If the current tag is related to the hash field, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The hash key.</param>
            <param name="field">The hash field related to the tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RenameTagForSetMember``1(System.String,``0,System.String,System.String)">
            <summary>
            Renames a tag related to a set member.
            If the current tag is not related to the set member, no operation is performed.
            If the current tag is related to the set member, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The set key.</param>
            <param name="member">The set member related to the current tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RemoveTagsFromHashField(System.String,System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a field in a hash.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RemoveTagsFromKey(System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RemoveTagsFromSetMember``1(System.String,``0,System.String[])">
            <summary>
            Removes the relation between the given tags and a set member.
            </summary>
            <param name="key">The set key.</param>
            <param name="member">The set member related to the tags.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetObject``1(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.TryGetObject``1(System.String,``0@)">
            <summary>
            Try to get the value of a key
            </summary>
            <param name="key">The key.</param>
            <param name="value"> When this method returns, contains the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter.</param>
            <returns>True if the cache contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetKeysByTag(System.String[],System.Boolean)">
            <summary>
            Gets all the keys related to the given tag(s).
            Returns a hashset with the keys.
            </summary>
            <param name="tags">The tags.</param>
            <param name="cleanUp">True to return only the existing keys within the tags (slower). Default is false.</param>
            <returns>HashSet{System.String}.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetObjectsByTag``1(System.String[])">
            <summary>
            Returns all the objects that has the given tag(s) related.
            Assumes all the objects are of the same type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The objects types</typeparam>
            <param name="tags">The tags</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.InvalidateKeysByTag(System.String[])">
            <summary>
            Removes all the keys related to the given tag(s).
            </summary>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetAllTags">
            <summary>
            Returns the entire collection of tags
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetKeysByPattern(System.String)">
            <summary>
            Return the keys that matches a specified pattern.
            Will use SCAN or KEYS depending on the server capabilities.
            </summary>
            <param name="pattern">The glob-style pattern to match</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.KeyExists(System.String)">
            <summary>
            Determines if a key exists.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.KeyExpire(System.String,System.DateTime)">
            <summary>
            Sets the expiration of a key from a local date time expiration value.
            </summary>
            <param name="key">The key to expire</param>
            <param name="expiration">The expiration local date time</param>
            <returns>True is the key expiration was updated</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.KeyTimeToLive(System.String,System.TimeSpan)">
            <summary>
            Sets the time-to-live of a key from a timespan value.
            </summary>
            <param name="key">The key to expire</param>
            <param name="ttl">The TTL timespan</param>
            <returns>True if the key expiration was updated</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.KeyTimeToLive(System.String)">
            <summary>
            Gets the time-to-live of a key.
            Returns NULL when key does not exist or does not have a timeout.
            </summary>
            <param name="key">The redis key to get its time-to-live</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.KeyPersist(System.String)">
            <summary>
            Removes the expiration of the given key.
            </summary>
            <param name="key">The key to persist</param>
            <returns>True is the key expiration was removed</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.Remove(System.String[])">
            <summary>
            Removes the specified keys.
            </summary>
            <param name="keys">The keys to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.Remove(System.String)">
            <summary>
            Removes the specified key-value.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetHashed``1(System.String,System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this field). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetHashed``2(System.String,``0,``1,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            The field can be any serializable type
            </summary>
            <typeparam name="TK">The field type</typeparam>
            <typeparam name="TV">The value type</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this field). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetHashed``1(System.String,System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetHashed``2(System.String,``0,``1,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            The field can be any serializable type
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="TK">The field type</typeparam>
            <typeparam name="TV">The value type</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.AddToSet``1(System.String,``0,System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Adds the given value to a redis set.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="value">The member value to store</param>
            <param name="tags">The tags to relate to this member.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this set). NULL to keep the current expiration.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RemoveFromSet``1(System.String,``0)">
            <summary>
            Removes the given value from a redis set.
            Returns true if the value was removed. (false if the element does not exists in the set)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="value">The member value to remove</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.AddToSortedSet``1(System.String,System.Double,``0,System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Adds the given value to a redis sorted set with the given score.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="score">The member score to store</param>
            <param name="value">The member value to store</param>
            <param name="tags">The tags to relate to this member.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this set). NULL to keep the current expiration.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RemoveFromSortedSet``1(System.String,``0)">
            <summary>
            Removes the given value from a redis sorted set.
            Returns true if the value was removed. (false if the element does not exists in the set)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="value">The member value to remove</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.SetHashed``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets the specified key/values pairs to a hashset.
            </summary>
            <param name="key">The key.</param>
            <param name="fieldValues">The field keys and values to store</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetHashed``1(System.String,System.String)">
            <summary>
            Gets a specified hased value from a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetHashed``2(System.String,``0)">
            <summary>
            Gets a specified hased value from a key
            </summary>
            <typeparam name="TK">The type of the hash fields</typeparam>
            <typeparam name="TV">The type of the hash values</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.TryGetHashed``1(System.String,System.String,``0@)">
            <summary>
            Try to get the value of a hash key
            </summary>
            <param name="key">The key.</param>
            <param name="field">The hash field.</param>
            <param name="value"> When this method returns, contains the value associated with the specified hash field within the key, if the key and field are found; 
            otherwise, the default value for the type of the value parameter.</param>
            <returns>True if the cache contains a hashed element with the specified key and field; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.RemoveHashed(System.String,System.String)">
            <summary>
            Removes a specified hased value from cache
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetHashedAll``1(System.String)">
            <summary>
            Gets all the values from a hash.
            The keys of the dictionary are the field names and the values are the objects
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.ScanHashed``1(System.String,System.String)">
            <summary>
            Matches a pattern on the field name of a hash, returning its values, assuming all the values in the hash are of the same type <typeparamref name="T" />.
            The keys of the dictionary are the field names and the values are the objects
            </summary>
            <typeparam name="T">The field value type</typeparam>
            <param name="key">The key.</param>
            <param name="pattern">The glob-style pattern to match.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.FlushAll">
            <summary>
            Flushes all the databases on every master node.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.HyperLogLogAdd``1(System.String,``0[])">
            <summary>
            Adds all the element arguments to the HyperLogLog data structure stored at the specified key.
            </summary>
            <typeparam name="T">The items type</typeparam>
            <param name="key">The redis key.</param>
            <param name="items">The items to add.</param>
            <returns><c>true</c> if at least 1 HyperLogLog internal register was altered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.HyperLogLogAdd``1(System.String,``0)">
            <summary>
            Adds the element to the HyperLogLog data structure stored at the specified key.
            </summary>
            <typeparam name="T">The items type</typeparam>
            <param name="key">The redis key.</param>
            <param name="item">The item to add.</param>
            <returns><c>true</c> if at least 1 HyperLogLog internal register was altered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.HyperLogLogCount(System.String)">
            <summary>
            Returns the approximated cardinality computed by the HyperLogLog data structure stored at the specified key, which is 0 if the variable does not exist.
            </summary>
            <param name="key">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.IsStringKeyInTag(System.String,System.String[])">
            <summary>
            Determines if a redis string key is included in any of the given tags.
            </summary>
            <param name="key">The redis string key to find</param>
            <param name="tags">The tags to look into</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.IsHashFieldInTag``1(System.String,``0,System.String[])">
            <summary>
            Determines if a redis hash field is included in any of the given tags.
            </summary>
            <param name="key">The redis hash key to find</param>
            <param name="field">The redis hash field to find</param>
            <param name="tags">The tags to look into</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.IsSetMemberInTag``1(System.String,``0,System.String[])">
            <summary>
            Determines if a redis set (or sorted set) member is included in any of the given tags.
            </summary>
            <param name="key">The redis set or sorted set key to find</param>
            <param name="member">The redis set member to find</param>
            <param name="tags">The tags to look into</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProvider.GetMembersByTag(System.String)">
            <summary>
            Get all the members related to the given tag
            </summary>
            <param name="tag">The tag name to get its members</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync">
            <summary>
            Cache Provider async contract
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.AddTagsToKeyAsync(System.String,System.String[])">
            <summary>
            Relates the given tags to a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.AddTagsToHashFieldAsync(System.String,System.String,System.String[])">
            <summary>
            Relates the given tags to a field inside a hash key.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveTagsFromHashFieldAsync(System.String,System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a field in a hash.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveTagsFromKeyAsync(System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveTagsFromSetMemberAsync``1(System.String,``0,System.String[])">
            <summary>
            Removes the relation between the given tags and a set member.
            </summary>
            <param name="key">The set key.</param>
            <param name="member">The set member related to the tags.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.AddTagsToSetMemberAsync``1(System.String,``0,System.String[])">
            <summary>
            Relates the given tags to a member inside a redis set, sorted set or geospatial index.
            </summary>
            <param name="key">The redis set, sorted set or geospatial index key.</param>
            <param name="member">The set member.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.AddToSetAsync``1(System.String,``0,System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Adds the given value to a redis set.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="value">The member value to store</param>
            <param name="tags">The tags to relate to this member.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this set). NULL to keep the current expiration.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.AddToSortedSetAsync``1(System.String,System.Double,``0,System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Adds the given value to a redis sorted set with the given score.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="score">The member score to store</param>
            <param name="value">The member value to store</param>
            <param name="tags">The tags to relate to this member.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this set). NULL to keep the current expiration.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveFromSortedSetAsync``1(System.String,``0)">
            <summary>
            Removes the given value from a redis sorted set.
            Returns true if the value was removed. (false if the element does not exists in the set)
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis set key.</param>
            <param name="value">The member value to remove</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FetchHashedAsync``1(System.String,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FetchHashedAsync``1(System.String,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field, and associates the field to the given tags.
            If there is data in the cache with the given key, then that data is returned, and the last three parameters are ignored.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FetchHashedAsync``1(System.String,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0,System.String[]},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field, and associates the field to the tags returned by the given tag builder.
            If there is data in the cache with the given key, then that data is returned, and the last three parameters are ignored.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tagsBuilder">The tags builder to specify tags depending on the value.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FetchObjectAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FetchObjectAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tags">The tags to associate with the key. Only associated when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FetchObjectAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0,System.String[]},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tagsBuilder">The tag builder to associte tags depending on the value.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetObjectAsync``1(System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Set the value of a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="ttl">The expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetObjectAsync``1(System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Set the value of a key, associating the key with the given tag(s).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="tags">The tags.</param>
            <param name="ttl">The time to live.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.GetSetObjectAsync``1(System.String,``0)">
            <summary>
            Atomically sets key to value and returns the old value stored at key. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The new value value.</param>
            <returns>The old value</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RenameTagForKeyAsync(System.String,System.String,System.String)">
            <summary>
            Renames a tag related to a key.
            If the current tag is not related to the key, no operation is performed.
            If the current tag is related to the key, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The key related to the tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RenameTagForHashFieldAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Renames a tag related to a hash field.
            If the current tag is not related to the hash field, no operation is performed.
            If the current tag is related to the hash field, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The hash key.</param>
            <param name="field">The hash field related to the tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RenameTagForSetMemberAsync``1(System.String,``0,System.String,System.String)">
            <summary>
            Renames a tag related to a set member.
            If the current tag is not related to the set member, no operation is performed.
            If the current tag is related to the set member, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The set key.</param>
            <param name="member">The set member related to the current tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.GetObjectAsync``1(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.GetKeysByTagAsync(System.String[],System.Boolean)">
            <summary>
            Gets all the keys related to the given tag(s).
            Returns a hashset with the keys.
            </summary>
            <param name="tags">The tags.</param>
            <param name="cleanUp">True to return only the existing keys within the tags (slower). Default is false.</param>
            <returns>HashSet{System.String}.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.InvalidateKeysByTagAsync(System.String[])">
            <summary>
            Removes all the keys related to the given tag(s).
            </summary>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.KeyExistsAsync(System.String)">
            <summary>
            Determines if a key exists.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.KeyExpireAsync(System.String,System.DateTime)">
            <summary>
            Sets the expiration of a key from a local date time expiration value.
            </summary>
            <param name="key">The key to expire</param>
            <param name="expiration">The expiration local date time</param>
            <returns>True is the key expiration was updated</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.KeyTimeToLiveAsync(System.String,System.TimeSpan)">
            <summary>
            Sets the time-to-live of a key from a timespan value.
            </summary>
            <param name="key">The key to expire</param>
            <param name="ttl">The TTL timespan</param>
            <returns>True if the key expiration was updated</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.KeyTimeToLiveAsync(System.String)">
            <summary>
            Gets the time-to-live of a key.
            Returns NULL when key does not exist or does not have a timeout.
            </summary>
            <param name="key">The redis key to get its time-to-live</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.KeyPersistAsync(System.String)">
            <summary>
            Removes the expiration of the given key.
            </summary>
            <param name="key">The key to persist</param>
            <returns>True is the key expiration was removed</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveAsync(System.String)">
            <summary>
            Removes the specified key-value.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveAsync(System.String[])">
            <summary>
            Removes the specified keys.
            </summary>
            <param name="keys">The keys to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.GetHashedAsync``1(System.String,System.String)">
            <summary>
            Gets a specified hased value from a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.GetHashedAsync``2(System.String,``0)">
            <summary>
            Gets a specified hased value from a key
            </summary>
            <typeparam name="TK">The type of the hash fields</typeparam>
            <typeparam name="TV">The type of the hash values</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.RemoveHashedAsync(System.String,System.String)">
            <summary>
            Removes a specified hased value from cache
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.GetHashedAllAsync``1(System.String)">
            <summary>
            Gets all the values from a hash.
            The keys of the dictionary are the field names and the values are the objects
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.FlushAllAsync">
            <summary>
            Flushes all the databases on every master node.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.HyperLogLogAddAsync``1(System.String,``0[])">
            <summary>
            Adds all the element arguments to the HyperLogLog data structure stored at the specified key.
            </summary>
            <typeparam name="T">The items type</typeparam>
            <param name="key">The redis key.</param>
            <param name="items">The items to add.</param>
            <returns><c>true</c> if at least 1 HyperLogLog internal register was altered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.HyperLogLogAddAsync``1(System.String,``0)">
            <summary>
            Adds the element to the HyperLogLog data structure stored at the specified key.
            </summary>
            <typeparam name="T">The items type</typeparam>
            <param name="key">The redis key.</param>
            <param name="item">The item to add.</param>
            <returns><c>true</c> if at least 1 HyperLogLog internal register was altered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.HyperLogLogCountAsync(System.String)">
            <summary>
            Returns the approximated cardinality computed by the HyperLogLog data structure stored at the specified key, which is 0 if the variable does not exist.
            </summary>
            <param name="key">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetHashedAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets the specified key/values pairs to a hashset.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="fieldValues">The field keys and values to store</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetHashedAsync``1(System.String,System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetHashedAsync``2(System.String,``0,``1,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="TK">The type of the key field</typeparam>
            <typeparam name="TV">The value type</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetHashedAsync``1(System.String,System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.SetHashedAsync``2(System.String,``0,``1,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.IsStringKeyInTagAsync(System.String,System.String[])">
            <summary>
            Determines if a redis string key is included in any of the given tags.
            </summary>
            <param name="key">The redis string key to find</param>
            <param name="tags">The tags to look into</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.IsHashFieldInTagAsync``1(System.String,``0,System.String[])">
            <summary>
            Determines if a redis hash field is included in any of the given tags.
            </summary>
            <param name="key">The redis hash key to find</param>
            <param name="field">The redis hash field to find</param>
            <param name="tags">The tags to look into</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICacheProviderAsync.IsSetMemberInTagAsync``1(System.String,``0,System.String[])">
            <summary>
            Determines if a redis set (or sorted set) member is included in any of the given tags.
            </summary>
            <param name="key">The redis set or sorted set key to find</param>
            <param name="member">The redis set member to find</param>
            <param name="tags">The tags to look into</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Providers.ICollectionProvider">
            <summary>
            Cached objects provider internal contract
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisList``1(System.String)">
            <summary>
            Returns an IRedisList implemented using a Redis List
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisDictionary``2(System.String)">
            <summary>
            Returns an IRedisDictionary implemented using a Redis Hash
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisSet``1(System.String)">
            <summary>
            Returns an IRedisSet implemented using a Redis Set
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisSortedSet``1(System.String)">
            <summary>
            Returns an IRedisSortedSet implemented using a Redis Sorted Set
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisBitmap(System.String)">
            <summary>
            Returns an ICollection implemented using a Redis string as a bitmap
            </summary>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisLexicographicSet(System.String)">
            <summary>
            Returns an ICollection(string) implemented using a Redis sorted set with lexicographical order
            </summary>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.ICollectionProvider.GetRedisString(System.String)">
            <summary>
            Returns an ICollection(char) implemented using a Redis string
            </summary>
            <param name="key">The redis key</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Providers.IGeoProvider">
            <summary>
            A typed geospatial index Provider interface
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoAdd``1(System.String,CachingFramework.Redis.Contracts.GeoMember{``0}[],System.String[])">
            <summary>
            Adds the specified geospatial members (latitude, longitude, object) to the specified key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="members">The members to add.</param>
            <returns>The number of elements added to the sorted set, not including elements already existing.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoAdd``1(System.String,System.Double,System.Double,``0,System.String[])">
            <summary>
            Adds the specified members to a geospatial index.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="latitude">The member latitude coordinate.</param>
            <param name="longitude">The member longitude coordinate.</param>
            <param name="member">The member to add.</param>
            <returns>The number of elements added to the sorted set, not including elements already existing.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoAdd``1(System.String,CachingFramework.Redis.Contracts.GeoCoordinate,``0,System.String[])">
            <summary>
            Adds the specified members to a geospatial index.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="coordinate">The member coordinates.</param>
            <param name="member">The member to add.</param>
            <returns>The number of elements added to the sorted set, not including elements already existing.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoHash``1(System.String,``0)">
            <summary>
            Return Geohash strings representing the position of a member in a geospatial index (where elements were added using GEOADD).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoPosition``1(System.String,``0[])">
            <summary>
            Return the positions (longitude,latitude) of all the specified members of the geospatial index at key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="members">The members.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoPosition``1(System.String,``0)">
            <summary>
            Return the position (longitude,latitude) of the specified member of the geospatial index at key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="member">The member.</param>
            <returns>NULL if the member does not exists</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoDistance``1(System.String,``0,``0,CachingFramework.Redis.Contracts.Unit)">
            <summary>
            Return the distance between two members in the geospatial index at key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="member1">The first member.</param>
            <param name="member2">The second member.</param>
            <param name="unit">The result unit.</param>
            <returns>The distance in the given unit or -1 in case of a non-existing member.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoRadius``1(System.String,CachingFramework.Redis.Contracts.GeoCoordinate,System.Double,CachingFramework.Redis.Contracts.Unit,System.Int32)">
            <summary>
            Return the members of a geospatial index, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="unit">The unit.</param>
            <param name="count">If greater than 0, limit the results to the first N matching items.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoRadius``1(System.String,System.Double,System.Double,System.Double,CachingFramework.Redis.Contracts.Unit)">
            <summary>
            Return the members of a geospatial index, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="latitude">The latitude of the center.</param>
            <param name="longitude">The latitude of the center.</param>
            <param name="radius">The radius.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IGeoProvider.GeoRadius``1(System.String,CachingFramework.Redis.Contracts.GeoCoordinate,System.Double,CachingFramework.Redis.Contracts.Unit)">
            <summary>
            Return the members of a geospatial index, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider">
            <summary>
            Key/Event space notifications API.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider.Subscribe(CachingFramework.Redis.Contracts.KeyEventSubscriptionType,System.Action{System.String,CachingFramework.Redis.Contracts.KeyEvent})">
            <summary>
            Subscribes to the specified type of events.
            </summary>
            <param name="subscriptionType">The subscription type.</param>
            <param name="action">Operation to be performed when the event occurs. 
            First parameter is the key affected. Second parameter is the event type.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider.Subscribe(System.String,System.Action{System.String,CachingFramework.Redis.Contracts.KeyEvent})">
            <summary>
            Subscribes to the key-space events for the given key.
            </summary>
            <param name="key">The redis key.</param>
            <param name="action">Operation to be performed when the event occurs. 
            First parameter is the key affected. Second parameter is the event type.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider.Subscribe(CachingFramework.Redis.Contracts.KeyEvent,System.Action{System.String,CachingFramework.Redis.Contracts.KeyEvent})">
            <summary>
            Subscribes the specified key event type.
            </summary>
            <param name="keyEvent">The key event.</param>
            <param name="action">Operation to be performed when the event occurs. 
            First parameter is the key affected. Second parameter is the event type.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider.Unsubscribe(CachingFramework.Redis.Contracts.KeyEventSubscriptionType)">
            <summary>
            Unsubscribes from the specified type of events.
            </summary>
            <param name="subscriptionType">The subscription type.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from the key-space events for the given key.
            </summary>
            <param name="key">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IKeyEventsProvider.Unsubscribe(CachingFramework.Redis.Contracts.KeyEvent)">
            <summary>
            Unsubscribes from the specified key event type.
            </summary>
            <param name="keyEvent">The key event.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Providers.IPubSubProvider">
            <summary>
            A typed PubSub Provider interface
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IPubSubProvider.Subscribe``1(System.String,System.Action{System.String,``0})">
            <summary>
            Subscribes to a specified channel for a speficied type.
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="channel">The channel name.</param>
            <param name="action">The action where the first parameter is the channel name and the second is the object message.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IPubSubProvider.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribes to a specified channel for a speficied type.
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="channel">The channel name.</param>
            <param name="action">The action where the first parameter is the object message.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IPubSubProvider.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from the specified channel.
            </summary>
            <param name="channel">The channel name.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.Providers.IPubSubProvider.Publish``1(System.String,``0)">
            <summary>
            Publishes an object to the specified channel.
            </summary>
            <typeparam name="T">The type of item to publish</typeparam>
            <param name="channel">The channel name.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap">
            <summary>
            Managed collection of bools using Redis bitmaps
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.SetBit(System.Int64,System.Byte)">
            <summary>
            Sets or clears the bit at offset. The bit is either set or cleared depending on bit parameter.
            When key does not exist, a new string value is created. The string is grown to make sure it can hold a bit at offset.
            </summary>
            <param name="offset">The zero-based offset.</param>
            <param name="bit">The bit value (any number > 0 is considered as true).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.GetBit(System.Int64)">
            <summary>
            Returns the bit value at offset in the string value stored at key. 
            When offset is beyond the string length, 0 is returned.
            </summary>
            <param name="offset">The zero-based offset.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.BitPosition(System.Byte,System.Int64,System.Int64)">
            <summary>
            Return the position of the first bit set to 1 or 0.  
            An start and end may be specified; these are in bytes, not bits; start and end can contain negative 
            values in order to index bytes starting from the end of the string.
            </summary>
            <param name="bit">The bit to search</param>
            <param name="start">The start position (in bytes)</param>
            <param name="stop">The end position (in bytes)</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.Count(System.Int64,System.Int64)">
            <summary>
            Count the number of set bits (population counting) in the given byte range.  
            It is possible to specify the counting operation only in an interval passing the additional arguments start and end.  
            </summary>
            <param name="start">The start position (in bytes)</param>
            <param name="stop">The end position (in bytes)</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.Add(System.Byte)">
            <summary>
            Appends an *entire byte* (8 bits) to the bitmap set to the given value.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.Contains(System.Byte,System.Int64,System.Int64)">
            <summary>
            Determines whether the bitmap contains the given bit within the byte(s) specified on the start/stop range.
            </summary>
            <param name="bit">The bit to check (any number > 0 is considered as true)</param>
            <param name="start">The start position (in bytes)</param>
            <param name="stop">The end position (in bytes)</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.Remove(System.Byte)">
            <summary>
            Inverts the first occurence of the specified bit in the bitmap.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.BitfieldGet``1(CachingFramework.Redis.Contracts.BitfieldType,System.Int64,System.Boolean)">
            <summary>
            Gets the specified integer field in the bitmap
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="offset">The offset (bit or ordinal).</param>
            <param name="offsetIsOrdinal">if set to <c>true</c>, offset is ordinal, so offset=N means the N-th counter of the fieldType size.
            If set to <c>false</c>, offset is the bit position, so offset=N means the N-th bit</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.BitfieldSet``1(CachingFramework.Redis.Contracts.BitfieldType,System.Int64,``0,System.Boolean,CachingFramework.Redis.Contracts.OverflowType)">
            <summary>
            Sets the specified integer field in the bitmap
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="offset">The offset (bit or ordinal).</param>
            <param name="value">The value to set.</param>
            <param name="offsetIsOrdinal">if set to <c>true</c>, offset is ordinal, so offset=N means the N-th counter of the fieldType size.
            If set to <c>false</c>, offset is the bit position, so offset=N means the N-th bit</param>
            <param name="overflowType">Overflow handling type.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisBitmap.BitfieldIncrementBy``1(CachingFramework.Redis.Contracts.BitfieldType,System.Int64,``0,System.Boolean,CachingFramework.Redis.Contracts.OverflowType)">
            <summary>
            Increment the specified integer counter
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="offset">The offset (bit or ordinal).</param>
            <param name="increment">The value to increment.</param>
            <param name="offsetIsOrdinal">if set to <c>true</c>, offset is ordinal, so offset=N means the N-th counter of the fieldType size.
            If set to <c>false</c>, offset is the bit position, so offset=N means the N-th bit</param>
            <param name="overflowType">Overflow handling.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2">
            <summary>
            Managed dictionary using a Redis Hash
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2.Add(`0,`1,System.String[])">
            <summary>
            Adds a single element to the dictionary related to the given tag(s).
            </summary>
            <param name="key">The redis key.</param>
            <param name="value">The value.</param>
            <param name="tags">The tags to relate.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds multiple elements to the dictionary.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2.Count">
            <summary>
            Returns the number of elements in the hash.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2.IncrementBy(`0,System.Int64)">
            <summary>
            Increments the number stored at the hash field key. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content can not be represented as integer.
            </summary>
            <param name="key">The hash field key to increment</param>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
            <remarks>You should use this method only when the serialization of the values can be represented as raw integers. i.e. This method will not work with BinarySerialization</remarks>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2.IncrementByFloat(`0,System.Double)">
            <summary>
            Increment the floating point number stored at the hash field key. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content is not parsable as a double precision floating point number.
            </summary>
            <param name="key">The hash field key to increment</param>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
            <remarks>You should use this method only when the serialization of the values can be represented as raw integers. i.e. This method will not work with BinarySerialization</remarks>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionary`2.GetValue(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>The value stored at key</returns>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2">
            <summary>
            Async implementation of a Managed dictionary using a Redis Hash
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.AddAsync(`0,`1,System.String[])">
            <summary>
            Adds a single element to the dictionary related to the given tag(s).
            </summary>
            <param name="key">The redis key.</param>
            <param name="value">The value.</param>
            <param name="tags">The tags to relate.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds multiple elements to the dictionary.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.GetCountAsync">
            <summary>
            Returns the number of elements in the hash.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.AddAsync(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the redis hash.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.ContainsKeyAsync(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.ContainsAsync(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.RemoveAsync(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.ClearAsync">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.IncrementByAsync(`0,System.Int64)">
            <summary>
            Increments the number stored at the hash field key. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content can not be represented as integer.
            </summary>
            <param name="key">The hash field key to increment</param>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
            <remarks>You should use this method only when the serialization of the values can be represented as raw integers. i.e. This method will not work with BinarySerialization</remarks>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.IncrementByFloatAsync(`0,System.Double)">
            <summary>
            Increment the floating point number stored at the hash field key. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content is not parsable as a double precision floating point number.
            </summary>
            <param name="key">The hash field key to increment</param>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
            <remarks>You should use this method only when the serialization of the values can be represented as raw integers. i.e. This method will not work with BinarySerialization</remarks>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisDictionaryAsync`2.GetValueAsync(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>The value stored at key</returns>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisLexicographicSet">
            <summary>
            Managed collection of strings using Redis sorted set
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisLexicographicSet.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of string values to the set.
            </summary>
            <param name="collection">The collection of string to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisLexicographicSet.AutoComplete(System.String,System.Int64)">
            <summary>
            Returns a list with the strings that starts with the specified <param name="partial"></param> string.
            </summary>
            <param name="partial">The partial string to match.</param>
            <param name="take">The take number for result pagination.</param>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisLexicographicSet.Count">
            <summary>
            Gets the number of elements contained in the collection/>.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisLexicographicSet.Match(System.String)">
            <summary>
            Iterates over the strings that matches the specified glob-style pattern.
            </summary>
            <param name="pattern">The glob-style pattern.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1">
            <summary>
            Managed list using a Redis List
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of values to the end of the list.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.PushFirst(`0)">
            <summary>
            Adds a new item to the list at the start of the list.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.PushLast(`0)">
            <summary>
            Adds a new item to the list at the end of the list (has the same effect as Add method).
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.PopFirst">
            <summary>
            Removes and return the item at the start of the list.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.PopLast">
            <summary>
            Removes and return the item at the end of the list.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.GetRange(System.Int64,System.Int64)">
            <summary>
            Returns the specified elements of the list stored at key. The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on.
            These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, -1 is the last element of the list, -2 the penultimate, and so on.
            </summary>
            <param name="start">The start index.</param>
            <param name="stop">The stop index (inclusve).</param>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.Count">
            <summary>
            Returns the number of elements in the list.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.FirstOrDefault">
            <summary>
            Returns the first element of the list, returns the type default if the list contains no elements.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.LastOrDefault">
            <summary>
            Returns the last element of the list, returns the type default if the list contains no elements.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.Insert(System.Int64,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.RemoveAt(System.Int64)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.Item(System.Int64)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.Trim(System.Int64,System.Int64)">
            <summary>
            Trim an existing list so that it will contain only the specified range of elements specified. 
            Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on.
            Start and end can also be negative numbers indicating offsets from the end of the list, where -1 is the last element of the list, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisList`1.Remove(`0,System.Int64)">
            <summary>
            Removes the specified occurrences of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="count">if count > 0: Remove a quantity of elements equal to value moving from head to tail. if count &lt; 0: Remove elements equal to value moving from tail to head. count = 0: Remove all elements equal to value.</param>
            <returns>true if at least one element was successfully removed from the list.</returns>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1">
            <summary>
            Async implementation of a Redis List
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of values to the end of the list.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.PushFirstAsync(`0)">
            <summary>
            Adds a new item to the list at the start of the list.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.PushLastAsync(`0)">
            <summary>
            Adds a new item to the list at the end of the list (has the same effect as Add method).
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.PopFirstAsync">
            <summary>
            Removes and return the item at the start of the list.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.PopLastAsync">
            <summary>
            Removes and return the item at the end of the list.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.GetRangeAsync(System.Int64,System.Int64)">
            <summary>
            Returns the specified elements of the list stored at key. The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on.
            These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, -1 is the last element of the list, -2 the penultimate, and so on.
            </summary>
            <param name="start">The start index.</param>
            <param name="stop">The stop index (inclusve).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.InsertAsync(System.Int64,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.RemoveAtAsync(System.Int64)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.TrimAsync(System.Int64,System.Int64)">
            <summary>
            Trim an existing list so that it will contain only the specified range of elements specified. 
            Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on.
            Start and end can also be negative numbers indicating offsets from the end of the list, where -1 is the last element of the list, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.RemoveAsync(`0,System.Int64)">
            <summary>
            Removes the specified occurrences of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="count">if count > 0: Remove a quantity of elements equal to value moving from head to tail. if count &lt; 0: Remove elements equal to value moving from tail to head. count = 0: Remove all elements equal to value.</param>
            <returns>true if at least one element was successfully removed from the list.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.AddAsync(`0)">
            <summary>
            Adds an item to the collection (has the same effect as AddLast method).
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.ContainsAsync(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.IndexOfAsync(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisListAsync`1.ClearAsync">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisObject">
            <summary>
             Redis object interface
             </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisObject.RedisKey">
            <summary>
            Gets the redis key for this object.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisObject.TimeToLive">
            <summary>
            Gets or sets the time to live.
            Null means the key is persistent.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisObject.Expiration">
            <summary>
            Gets or sets the Expiration as a local datetime.
            Null means the key is persistent.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisSet`1">
            <summary>
            Managed HashSet using a Redis Set
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple elements to the set.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisSet`1.Count">
            <summary>
            Returns the number of elements in the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSet`1.Pop">
            <summary>
            Returns and remove a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSet`1.GetRandomMember">
            <summary>
            Returns a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSet`1.Add(`0,System.String[])">
            <summary>
            Adds an item related to one or more tags.
            </summary>
            <param name="item">The item.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1">
            <summary>
            Redis set operations
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple elements to the set.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.GetCountAsync">
            <summary>
            Returns the number of elements in the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.PopAsync">
            <summary>
            Returns and remove a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.GetRandomMemberAsync">
            <summary>
            Returns a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.AddAsync(`0,System.String[])">
            <summary>
            Adds an item related to one or more tags.
            </summary>
            <param name="item">The item.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.AddAsync(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.ContainsAsync(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.RemoveAsync(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSetAsync`1.ClearAsync">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1">
            <summary>
            Managed ICollection using a Redis Sorted Set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Add(CachingFramework.Redis.Contracts.SortedMember{`0},CachingFramework.Redis.Contracts.When)">
            <summary>
            Adds the specified member with the specified score to the sorted set stored at key. 
            If key does not exist, a new sorted set with the specified member as sole member is created, like if the sorted set was empty. 
            </summary>
            <param name="member">The sorted member to add.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Add(System.Double,`0,CachingFramework.Redis.Contracts.When)">
            <summary>
            Adds the specified member with the specified score to the sorted set stored at key. 
            If key does not exist, a new sorted set with the specified member as sole member is created, like if the sorted set was empty. 
            </summary>
            <param name="item">The item to add.</param>
            <param name="score">The item score.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Add(CachingFramework.Redis.Contracts.SortedMember{`0},System.String[])">
            <summary>
            Adds a member with score to the sorted set stored at key, related to one or more tags. 
            </summary>
            <param name="member">The sorted member to add.</param>
            <param name="tags">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Add(System.Double,`0,System.String[])">
            <summary>
            Adds a member with score to the sorted set stored at key, related to one or more tags. 
            </summary>
            <param name="score">The member score.</param>
            <param name="item">The sorted member to add.</param>
            <param name="tags">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.AddRange(System.Collections.Generic.IEnumerable{CachingFramework.Redis.Contracts.SortedMember{`0}},CachingFramework.Redis.Contracts.When)">
            <summary>
            Adds all the specified members with the specified scores to the sorted set stored at key. 
            If key does not exist, a new sorted set with the specified members as sole members is created, like if the sorted set was empty. 
            </summary>
            <param name="members">The members to add.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.CountByScore(System.Double,System.Double)">
            <summary>
            Returns the number of elements in the sorted set at key with a score between min and max.
            </summary>
            <param name="min">The minimum score to consider (inclusive).</param>
            <param name="max">The maximum score to consider (inclusive).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.GetRangeByScore(System.Double,System.Double,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Returns all the elements in the sorted set at key with a score between min and max (inclusive). 
            </summary>
            <param name="min">The minimum score to consider.</param>
            <param name="max">The maximum score to consider.</param>
            <param name="descending">if set to <c>true</c> the elements are considered to be ordered from high to low scores.</param>
            <param name="skip">The skip number for result pagination.</param>
            <param name="take">The take number for result pagination.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.GetRangeByRank(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the lowest to the highest score by default.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="descending">if set to <c>true</c> the elements are considered to be ordered from high to low scores.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.RemoveRangeByScore(System.Double,System.Double)">
            <summary>
            Removes all elements in the sorted set with a score between min and max (inclusive).
            </summary>
            <param name="min">The minimum score to consider.</param>
            <param name="max">The maximum score to consider.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.RemoveRangeByRank(System.Int64,System.Int64)">
            <summary>
            Removes all elements in the sorted set stored with rank between start and stop. 
            Both start and stop are zero-based indexes with 0 being the element with the lowest score. 
            These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. 
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.IncrementScore(`0,System.Double)">
            <summary>
            Increments the score of member in the sorted by the given value. 
            If member does not exist in the sorted set, it is added with increment as its score (as if its previous score was 0.0). 
            If key does not exist, a new sorted set with the specified member as its sole member is created.
            </summary>
            <param name="item">The item to increment its score.</param>
            <param name="value">The increment value.</param>
            <returns>The new score of the member</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.RankOf(`0,System.Boolean)">
            <summary>
            Returns the rank of member in the sorted set, with the scores ordered from low to high by default. 
            The rank (or index) is zero-based.
            </summary>
            <param name="item">The item.</param>
            <param name="descending">if set to <c>true</c> the elements are considered to be ordered from high to low scores.</param>
            <returns>The rank of the item in the sorted set, or NULL when the key or the member does not exists</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.ScoreOf(`0)">
            <summary>
            Returns the score of member in the sorted set at key.
            </summary>
            <param name="item">The item.</param>
            <returns>The score of the item in the sorted set, or NULL when the key or the member does not exists</returns>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Count">
            <summary>
            Returns the number of elements in the sorted set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sorted set collection.
            The returned items will NOT be sorted by score.
            Use GetRangeByScore if you need an ordered iterator. 
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Add(`0)">
            <summary>
            Adds the specified item with score 0, to the sorted set. 
            If key does not exist, a new sorted set with the specified member as sole member is created, like if the sorted set was empty. 
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisSortedSet`1.Contains(`0)">
            <summary>
            Determines whether the sorted set contains a specific item.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>true if <paramref name="item" /> is found; otherwise, false.</returns>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisString">
            <summary>
            Managed string using a Redis string.
            Redis Strings are limited to 512 megabytes
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Append(System.String)">
            <summary>
            Appends the value at the end of the string. 
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Set(System.String)">
            <summary>
            Overwrites the entire string stored at key. 
            </summary>
            <param name="value">The new string to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Set(System.Int64)">
            <summary>
            Overwrites the integer stored at key. 
            </summary>
            <param name="value">The new integer to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Set(System.Double)">
            <summary>
            Overwrites the floating point number stored at key. 
            </summary>
            <param name="value">The new number to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.GetSet(System.String)">
            <summary>
            Overwrites the entire string stored at key and returns the old value stored at key. 
            </summary>
            <param name="value">The new string to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.GetSet(System.Int64)">
            <summary>
            Overwrites the entire integer stored at key and returns the old value stored at key. 
            </summary>
            <param name="value">The new integer to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.GetSet(System.Double)">
            <summary>
            Overwrites the entire floating point number stored at key and returns the old value stored at key. 
            </summary>
            <param name="value">The new number to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.SetRange(System.Int64,System.String)">
            <summary>
            Overwrites part of the string stored at key, starting at the specified offset, for the entire length of value. 
            If the offset is larger than the current length of the string at key, the string is padded with zero-bytes to make offset fit. 
            Non-existing keys are considered as empty strings, so this command will make sure it holds a string large enough to be able to set value at offset.
            </summary>
            <param name="offset">The zero-based offset in bytes.</param>
            <param name="value">The string to write.</param>
            <returns>The length of the string after it was modified by the command</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.GetRange(System.Int64,System.Int64)">
            <summary>
            Returns the substring of the string value stored at key, determined by the offsets start and stop (both are inclusive). 
            Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Length">
            <summary>
            Returns the length of the string value stored at key.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Item(System.Int64,System.Int64)">
            <summary>
            Returns the substring of the string value stored at key, determined by the offsets start and stop (both are inclusive). 
            Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.IncrementBy(System.Int64)">
            <summary>
            Increments the number stored at key by increment. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content can not be represented as integer.
            </summary>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.IncrementByFloat(System.Double)">
            <summary>
            Increment the string representing a floating point number stored at key by the specified increment. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content is not parsable as a double precision floating point number.
            </summary>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.Clear">
            <summary>
            Clears the string
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.AsInteger(System.Int64)">
            <summary>
            Returns the contents of the string as an integer value.
            Returns the given default when the key does not exists.
            Throws an exception if the string value cannot be parsed as an integer
            </summary>
            <param name="default">The default value to return when the key does not exists (default is 0).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisString.AsFloat(System.Double)">
            <summary>
            Returns the contents of the string as a floating point value.
            Returns the given default when the key does not exists.
            Throws an exception if the string value cannot be parsed as a double precision floating point number.
            </summary>
            <param name="default">The default value to return when the key does not exists (default is 0).</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync">
            <summary>
            Managed string using a Redis string.
            Redis Strings are limited to 512 megabytes
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.AppendAsync(System.String)">
            <summary>
            Appends the value at the end of the string. 
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.SetAsync(System.String)">
            <summary>
            Overwrites the entire string stored at key. 
            </summary>
            <param name="value">The new string to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.SetAsync(System.Int64)">
            <summary>
            Overwrites the integer stored at key. 
            </summary>
            <param name="value">The new integer to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.SetAsync(System.Double)">
            <summary>
            Overwrites the floating point number stored at key. 
            </summary>
            <param name="value">The new number to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.GetSetAsync(System.String)">
            <summary>
            Overwrites the entire string stored at key and returns the old value stored at key. 
            </summary>
            <param name="value">The new string to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.GetSetAsync(System.Int64)">
            <summary>
            Overwrites the entire integer stored at key and returns the old value stored at key. 
            </summary>
            <param name="value">The new integer to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.GetSetAsync(System.Double)">
            <summary>
            Overwrites the entire floating point number stored at key and returns the old value stored at key. 
            </summary>
            <param name="value">The new number to write.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.SetRangeAsync(System.Int64,System.String)">
            <summary>
            Overwrites part of the string stored at key, starting at the specified offset, for the entire length of value. 
            If the offset is larger than the current length of the string at key, the string is padded with zero-bytes to make offset fit. 
            Non-existing keys are considered as empty strings, so this command will make sure it holds a string large enough to be able to set value at offset.
            </summary>
            <param name="offset">The zero-based offset in bytes.</param>
            <param name="value">The string to write.</param>
            <returns>The length of the string after it was modified by the command</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.GetRangeAsync(System.Int64,System.Int64)">
            <summary>
            Returns the substring of the string value stored at key, determined by the offsets start and stop (both are inclusive). 
            Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.IncrementByAsync(System.Int64)">
            <summary>
            Increments the number stored at key by increment. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content can not be represented as integer.
            </summary>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.IncrementByFloatAsync(System.Double)">
            <summary>
            Increment the string representing a floating point number stored at key by the specified increment. 
            If the key does not exist, it is set to 0 before performing the operation. 
            An exception is thrown if the key content is not parsable as a double precision floating point number.
            </summary>
            <param name="increment">The increment value</param>
            <returns>The value represented in the string after the increment.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.ClearAsync">
            <summary>
            Clears the string
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.AsIntegerAsync(System.Int64)">
            <summary>
            Returns the contents of the string as an integer value.
            Returns the default when the key does not exists.
            Throws an exception if the string value cannot be parsed as an integer
            </summary>
            <param name="default">The default value to return when the key does not exists (default is 0).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.AsFloatAsync(System.Double)">
            <summary>
            Returns the contents of the string as a floating point value.
            Returns the default when the key does not exists.
            Throws an exception if the string value cannot be parsed as a double precision floating point number.
            </summary>
            <param name="default">The default value to return when the key does not exists (default is 0).</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.RedisObjects.IRedisStringAsync.ToStringAsync">
            <summary>
            Returns the string that represents this instance.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.SortedMember`1">
            <summary>
            Class SortedMember.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.SortedMember`1.Score">
            <summary>
            Gets or sets the score.
            </summary>
            <value>The score.</value>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.SortedMember`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.SortedMember`1.#ctor(System.Double,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Contracts.SortedMember`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="score">The score.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.TagMember">
            <summary>
            Represents a tagged element that could be a redis string, a hash field or a set member
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.TagMember.Key">
            <summary>
            The redis key pointed by this tag member
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.TagMember.MemberType">
            <summary>
            The redis member type pointed by this tag member
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.TagMember.MemberValue">
            <summary>
            The redis member value pointed by this tag member.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.TagMember.GetMemberAs``1">
            <summary>
            Returns the deserialized member value
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.TagMemberType">
            <summary>
            Tag member type
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.TagMemberType.StringKey">
            <summary>Member of type Redis String (single key)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.TagMemberType.HashField">
            <summary>Member of type Redis Hash (single hash field)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.TagMemberType.SetMember">
            <summary>Member of type Redis Set (single set member)</summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.TagMemberType.SortedSetMember">
            <summary>Member of type Redis SortedSet (single sorted set member)</summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.TextAttribute">
            <summary>
            Attribute to indicate the Text abbreviation in redis
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Contracts.TextAttribute.Text">
            <summary>
            Gets or sets the Text abbreviation.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.TextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Contracts.TextAttribute"/> class.
            </summary>
            <param name="text">The Text.</param>
        </member>
        <member name="M:CachingFramework.Redis.Contracts.TextAttribute.GetEnumText(System.Enum)">
            <summary>
            Returns the Text abbreviation for an enum value 
            </summary>
            <param name="value">The enum value.</param>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.Unit">
            <summary>
            Distance unit
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Contracts.When">
            <summary>
            Indicates when this operation should be performed (only some variations are legal in a given context)
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.When.Always">
            <summary>
            The operation should occur whether or not there is an existing value  
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.When.Exists">
            <summary>
            The operation should only occur when there is an existing value
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Contracts.When.NotExists">
            <summary>
            The operation should only occur when there is not an existing value
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.LuaScriptResource">
            <summary>
            Class LuaScriptResource.
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.LuaScriptResource.Bitfield">
            <summary>
            The bitfield command
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.LuaScriptResource.Zadd">
            <summary>
            The ZADD command
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Providers.RedisCacheProvider">
            <summary>
            Cache provider implementation using Redis.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.#ctor(CachingFramework.Redis.Providers.RedisProviderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisCacheProvider"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="F:CachingFramework.Redis.Providers.RedisCacheProvider.TagFormat">
            <summary>
            The tag format for the keys representing tags
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Providers.RedisCacheProvider.TagHashSeparator">
            <summary>
            Separator to use for the value when a tag is related to a HASH field
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Providers.RedisCacheProvider.TagSetSeparator">
            <summary>
            Separator to use for the value when a tag is related to a SET member
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FetchObject``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FetchObject``1(System.String,System.Func{``0},System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tags">The tags to associate with the key. Only associated when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FetchObject``1(System.String,System.Func{``0},System.Func{``0,System.String[]},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches data from the cache, using the given cache key.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key and associated to the given tags, and that will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tagsBuilder">The tag builder to associte tags depending on the value.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FetchHashed``1(System.String,System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field.
            If there is data in the cache with the given key, then that data is returned.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FetchHashed``1(System.String,System.String,System.Func{``0},System.String[],System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field, and associates the field to the given tags.
            If there is data in the cache with the given key, then that data is returned, and the last three parameters are ignored.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FetchHashed``1(System.String,System.String,System.Func{``0},System.Func{``0,System.String[]},System.Nullable{System.TimeSpan})">
            <summary>
            Fetches hashed data from the cache, using the given cache key and field, and associates the field to the tags returned by the given tag builder.
            If there is data in the cache with the given key, then that data is returned, and the last three parameters are ignored.
            If there is no such data in the cache (a cache miss occurred), then the value returned by func will be
            written to the cache under the given cache key-field, and that will be returned.
            </summary>
            <param name="key">The cache key.</param>
            <param name="field">The field to obtain.</param>
            <param name="func">The function that returns the cache value, only executed when there is a cache miss.</param>
            <param name="tagsBuilder">The tag builder to specify tags depending on the value.</param>
            <param name="expiry">The expiration timespan.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetObject``1(System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Set the value of a redis string key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="ttl">The expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetObject``1(System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Set the value of a key, associating the key with the given tag(s).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="tags">The tags.</param>
            <param name="ttl">The expiry.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetSetObject``1(System.String,``0)">
            <summary>
            Atomically sets key to value and returns the old value stored at key. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The new value value.</param>
            <returns>The old value</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.AddTagsToKey(System.String,System.String[])">
            <summary>
            Relates the given tags to a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.AddTagsToKeyAsync(System.String,System.String[])">
            <summary>
            Relates the given tags to a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RenameTagForKey(System.String,System.String,System.String)">
            <summary>
            Renames a tag related to a key.
            If the current tag is not related to the key, no operation is performed.
            If the current tag is related to the key, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The key related to the tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.AddTagsToHashField(System.String,System.String,System.String[])">
            <summary>
            Relates the given tags to a field inside a hash key.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.AddTagsToHashFieldAsync(System.String,System.String,System.String[])">
            <summary>
            Relates the given tags to a field inside a hash key.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RenameTagForHashField(System.String,System.String,System.String,System.String)">
            <summary>
            Renames a tag related to a hash field.
            If the current tag is not related to the hash field, no operation is performed.
            If the current tag is related to the hash field, the tag relation is removed and the new tag relation is inserted.
            </summary>
            <param name="key">The hash key.</param>
            <param name="field">The hash field related to the tag.</param>
            <param name="currentTag">The current tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RemoveTagsFromHashField(System.String,System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a field in a hash.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RemoveTagsFromHashFieldAsync(System.String,System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a field in a hash.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RemoveTagsFromKey(System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RemoveTagsFromKeyAsync(System.String,System.String[])">
            <summary>
            Removes the relation between the given tags and a key.
            </summary>
            <param name="key">The key.</param>
            <param name="tags">The tag(s).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.InvalidateKeysByTag(System.String[])">
            <summary>
            Removes all the keys and hash fields related to the given tag(s).
            </summary>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetKeysByTag(System.String[],System.Boolean)">
            <summary>
            Gets all the keys related to the given tag(s).
            Returns a hashset with the keys.
            Also does the cleanup for the given tags if the parameter cleanUp is true.
            Since it is cluster compatible, and cluster does not allow multi-key operations, we cannot use SUNION or LUA scripts.
            </summary>
            <param name="tags">The tags.</param>
            <param name="cleanUp">True to return only the existing keys within the tags (slower). Default is false.</param>
            <returns>HashSet{System.String}.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetMembersByTag(System.String)">
            <summary>
            Get all the members related to the given tag
            </summary>
            <param name="tag">The tag name to get its members</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetObjectsByTag``1(System.String[])">
            <summary>
            Returns all the objects that has the given tag(s) related.
            Assumes all the objects are of the same type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The objects types</typeparam>
            <param name="tags">The tags</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetObject``1(System.String)">
            <summary>
            Gets a deserialized value from a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.TryGetObject``1(System.String,``0@)">
            <summary>
            Try to get the value of a key
            </summary>
            <param name="key">The key.</param>
            <param name="value"> When this method returns, contains the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter.</param>
            <returns>True if the cache contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetAllTags">
            <summary>
            Returns the entire collection of tags
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetKeysByPattern(System.String)">
            <summary>
            Return the keys that matches a specified pattern.
            Will use SCAN or KEYS depending on the server capabilities.
            </summary>
            <param name="pattern">The glob-style pattern to match</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.Remove(System.String)">
            <summary>
            Removes the specified key-value.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <remarks>Redis command: DEL key</remarks>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.KeyExists(System.String)">
            <summary>
            Determines if a key exists.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.KeyExpire(System.String,System.DateTime)">
            <summary>
            Sets the expiration of a key from a local date time expiration value.
            </summary>
            <param name="key">The key to expire</param>
            <param name="expiration">The expiration local date time</param>
            <returns>True is the key expiration was updated</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.KeyTimeToLive(System.String,System.TimeSpan)">
            <summary>
            Sets the time-to-live of a key from a timespan value.
            </summary>
            <param name="key">The key to expire</param>
            <param name="ttl">The TTL timespan</param>
            <returns>True is the key expiration was updated</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.KeyTimeToLive(System.String)">
            <summary>
            Gets the time-to-live of a key.
            Returns NULL when key does not exist or does not have a timeout.
            </summary>
            <param name="key">The redis key to get its time-to-live</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.KeyPersist(System.String)">
            <summary>
            Removes the expiration of the given key.
            </summary>
            <param name="key">The key to persist</param>
            <returns>True is the key expiration was removed</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.Remove(System.String[])">
            <summary>
            Removes the specified keys.
            </summary>
            <param name="keys">The keys to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RemoveAsync(System.String[])">
            <summary>
            Removes the specified keys.
            </summary>
            <param name="keys">The keys to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashed``1(System.String,System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashed``2(System.String,``0,``1,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashed``1(System.String,System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashed``2(System.String,``0,``1,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashedAsync``1(System.String,System.String,``0,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashedAsync``2(System.String,``0,``1,System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="TK">The type of the key field</typeparam>
            <typeparam name="TV">The value type</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashedAsync``1(System.String,System.String,``0,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashedAsync``2(System.String,``0,``1,System.String[],System.Nullable{System.TimeSpan},CachingFramework.Redis.Contracts.When)">
            <summary>
            Sets the specified value to a hashset using the pair hashKey+field.
            (The latest expiration applies to the whole key)
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field key</param>
            <param name="value">The value to store</param>
            <param name="tags">The tags to relate to this field.</param>
            <param name="ttl">Set the current expiration timespan to the whole key (not only this hash). NULL to keep the current expiration.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashedAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets the specified key/values pairs to a hashset.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="fieldValues">The field keys and values to store</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetHashed``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets the specified key/values pairs to a hashset.
            (The latest expiration applies to the whole key)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="fieldValues">The field keys and values to store</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetHashed``1(System.String,System.String)">
            <summary>
            Gets a specified hashed value from a key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetHashed``2(System.String,``0)">
            <summary>
            Gets a specified hased value from a key
            </summary>
            <typeparam name="TK">The type of the hash fields</typeparam>
            <typeparam name="TV">The type of the hash values</typeparam>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.TryGetHashed``1(System.String,System.String,``0@)">
            <summary>
            Try to get the value of an element in a hashed key
            </summary>
            <param name="key">The key.</param>
            <param name="field">The hash field.</param>
            <param name="value">When this method returns, contains the value associated with the specified hash field within the key, if the key and field are found; 
            otherwise, the default value for the type of the value parameter.</param>
            <returns>True if the cache contains a hashed element with the specified key and field; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RemoveHashed(System.String,System.String)">
            <summary>
            Removes a specified hased value from cache
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetHashedAll``1(System.String)">
            <summary>
            Gets all the values from a hash, assuming all the values in the hash are of the same type <typeparamref name="T" />.
            The keys of the dictionary are the field names and the values are the objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.ScanHashed``1(System.String,System.String)">
            <summary>
            Matches a pattern on the field name of a hash, returning its values, assuming all the values in the hash are of the same type <typeparamref name="T" />.
            The keys of the dictionary are the field names and the values are the objects
            </summary>
            <typeparam name="T">The field value type</typeparam>
            <param name="key">The key.</param>
            <param name="pattern">The glob-style pattern to match.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.HyperLogLogAdd``1(System.String,``0[])">
            <summary>
            Adds all the element arguments to the HyperLogLog data structure stored at the specified key.
            </summary>
            <typeparam name="T">The items type</typeparam>
            <param name="key">The redis key.</param>
            <param name="items">The items to add.</param>
            <returns><c>true</c> if at least 1 HyperLogLog internal register was altered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.HyperLogLogAdd``1(System.String,``0)">
            <summary>
            Adds the element to the HyperLogLog data structure stored at the specified key.
            </summary>
            <typeparam name="T">The items type</typeparam>
            <param name="key">The redis key.</param>
            <param name="item">The item to add.</param>
            <returns><c>true</c> if at least 1 HyperLogLog internal register was altered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.HyperLogLogCount(System.String)">
            <summary>
            Returns the approximated cardinality computed by the HyperLogLog data structure stored at the specified key, which is 0 if the variable does not exist.
            </summary>
            <param name="key">The redis key.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FlushAll">
            <summary>
            Flushes all the databases on every master node.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.IsStringKeyInTag(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.IsHashFieldInTag``1(System.String,``0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.IsSetMemberInTag``1(System.String,``0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.IsStringKeyInTagAsync(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.IsHashFieldInTagAsync``1(System.String,``0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.IsSetMemberInTagAsync``1(System.String,``0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.SetMaxExpirationAsync(StackExchange.Redis.IBatch,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Sets the maximum TTL between the current key TTL and the given TTL. Return the batch task to await
            </summary>
            <param name="batch">The batch context.</param>
            <param name="key">The key to compare and (eventually) set the expiration.</param>
            <param name="ttl">The TTL.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetTaggedItemsNoCleanup(StackExchange.Redis.IDatabase,System.String[])">
            <summary>
            Get all the keys related to a tag(s), the keys returned are not tested for existence.
            </summary>
            <param name="db">The database.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetTaggedItemsWithCleanup(StackExchange.Redis.IDatabase,System.String[])">
            <summary>
            Get all the keys related to a tag(s), only returns the keys that currently exists.
            </summary>
            <param name="db">The database.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetMemberSetItem(System.String,StackExchange.Redis.RedisValue)">
            <summary>
            Gets the set member value part of a tag member.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetHashFieldItem(System.String,StackExchange.Redis.RedisValue)">
            <summary>
            Gets the hash field part of a tag member.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FormatTag(System.String)">
            <summary>
            Return the RedisKey used for a tag
            </summary>
            <param name="tag">The tag name</param>
            <returns>RedisKey.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FormatHashField(System.String,System.String)">
            <summary>
            Return the RedisValue to use for a tag that points to a hash field
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field.</param>
            <returns>RedisKey.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.FormatSerializedMember``1(System.String,System.String,``0)">
            <summary>
            Return the RedisValue to use for a tag that points to a serialized member (hash field/member set)
            </summary>
            <param name="key">The key.</param>
            <param name="separator">The tag separator to use.</param>
            <param name="member">The member (hash field/member set).</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.RunInAllMasters(System.Action{StackExchange.Redis.IServer})">
            <summary>
            Runs a Server command in all the master servers.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.EnumerateInAllMasters``1(System.Func{StackExchange.Redis.IServer,``0})">
            <summary>
            Runs a Server command (that returns an enumeration) in all the master servers.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCacheProvider.GetMastersServers">
            <summary>
            Gets the masters servers endpoints.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.Providers.RedisCollectionProvider">
            <summary>
            Collection provider using Redis
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,CachingFramework.Redis.Contracts.Providers.ICacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisCollectionProvider"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="cacheProvider">The cache provider instance.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisList``1(System.String)">
            <summary>
            Returns an IList implemented using a Redis List
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisDictionary``2(System.String)">
            <summary>
            Returns an IDictionary implemented using a Redis Hash
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisSet``1(System.String)">
            <summary>
            Returns an ISet implemented using a Redis Set
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisSortedSet``1(System.String)">
            <summary>
            Returns an ICollection implemented using a Redis Sorted Set
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisBitmap(System.String)">
            <summary>
            Returns an ICollection implemented using a Redis string as a bitmap
            </summary>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisLexicographicSet(System.String)">
            <summary>
            Returns an ICollection(string) implemented using a Redis sorted set with lexicographical order
            </summary>
            <param name="key">The redis key</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisCollectionProvider.GetRedisString(System.String)">
            <summary>
            Returns an ICollection(char) implemented using a Redis string
            </summary>
            <param name="key">The redis key</param>
        </member>
        <member name="T:CachingFramework.Redis.Providers.RedisGeoProvider">
            <summary>
            geospatial index provider implementation using Redis.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,CachingFramework.Redis.Contracts.Providers.ICacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisGeoProvider"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="cacheProvider">The cache provider.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoAdd``1(System.String,CachingFramework.Redis.Contracts.GeoMember{``0}[],System.String[])">
            <summary>
            Adds the specified geospatial members (latitude, longitude, object) to the specified key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="members">The members to add.</param>
            <param name="tags">The tags to relate to the members.</param>
            <returns>The number of elements added to the sorted set, not including elements already existing.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoAdd``1(System.String,System.Double,System.Double,``0,System.String[])">
            <summary>
            Adds the specified members to a geospatial index.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="latitude">The member latitude coordinate.</param>
            <param name="longitude">The member longitude coordinate.</param>
            <param name="member">The member to add.</param>
            <param name="tags">The tags to relate to the members.</param>
            <returns>The number of elements added to the sorted set, not including elements already existing.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoAdd``1(System.String,CachingFramework.Redis.Contracts.GeoCoordinate,``0,System.String[])">
            <summary>
            Adds the specified members to a geospatial index.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="coordinate">The member coordinates.</param>
            <param name="member">The member to add.</param>
            <param name="tags">The tags to relate to the members.</param>
            <returns>The number of elements added to the sorted set, not including elements already existing.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoHash``1(System.String,``0)">
            <summary>
            Return Geohash strings representing the position of a member in a geospatial index (where elements were added using GEOADD).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="member">The member.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoPosition``1(System.String,``0[])">
            <summary>
            Return the positions (longitude,latitude) of all the specified members of the geospatial index at key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="members">The members.</param>
            <returns>IEnumerable{GeoMember{``0}}.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoPosition``1(System.String,``0)">
            <summary>
            Return the position (longitude,latitude) of the specified member of the geospatial index at key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="member">The member.</param>
            <returns>NULL if the member does not exists</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoDistance``1(System.String,``0,``0,CachingFramework.Redis.Contracts.Unit)">
            <summary>
            Return the distance between two members in the geospatial index at key.
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="member1">The first member.</param>
            <param name="member2">The second member.</param>
            <param name="unit">The result unit.</param>
            <returns>The distance in the given unit or -1 in case of a non-existing member.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoRadius``1(System.String,CachingFramework.Redis.Contracts.GeoCoordinate,System.Double,CachingFramework.Redis.Contracts.Unit,System.Int32)">
            <summary>
            Return the members of a geospatial index, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="unit">The unit.</param>
            <param name="count">If greater than 0, limit the results to the first N matching items.</param>
            <returns>IEnumerable{GeoMember{``0}}.</returns>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoRadius``1(System.String,System.Double,System.Double,System.Double,CachingFramework.Redis.Contracts.Unit)">
            <summary>
            Return the members of a geospatial index, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="latitude">The latitude of the center.</param>
            <param name="longitude">The latitude of the center.</param>
            <param name="radius">The radius.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisGeoProvider.GeoRadius``1(System.String,CachingFramework.Redis.Contracts.GeoCoordinate,System.Double,CachingFramework.Redis.Contracts.Unit)">
            <summary>
            Return the members of a geospatial index, which are within the borders of the area specified with the center location and the maximum distance from the center (the radius).
            </summary>
            <typeparam name="T">The member type</typeparam>
            <param name="key">The redis key.</param>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="T:CachingFramework.Redis.Providers.RedisProviderBase">
            <summary>
            Redis Provider Base Class.
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Providers.RedisProviderBase._context">
            <summary>
            The redis provider context
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Providers.RedisProviderBase.RedisConnection">
            <summary>
            Gets the redis connection.
            </summary>
            <value>The redis connection.</value>
        </member>
        <member name="P:CachingFramework.Redis.Providers.RedisProviderBase.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisProviderBase.#ctor(CachingFramework.Redis.Providers.RedisProviderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisProviderBase"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:CachingFramework.Redis.Providers.RedisProviderContext">
            <summary>
            Internal providers commoncontext
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.Providers.RedisProviderContext.RedisConnection">
            <summary>
            The redis connection
            </summary>
            <value>The redis connection.</value>
        </member>
        <member name="P:CachingFramework.Redis.Providers.RedisProviderContext.Serializer">
            <summary>
            The serializer
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisProviderContext.#ctor(StackExchange.Redis.IConnectionMultiplexer,CachingFramework.Redis.Contracts.ISerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisProviderContext"/> class.
            </summary>
            <param name="connection">The connection multiplexer to use.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisProviderContext.#ctor(System.String,CachingFramework.Redis.Contracts.ISerializer,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisProviderContext"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="serializer">The serializer.</param>
            <param name="log">The textwriter to use for logging purposes.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisProviderContext.#ctor(StackExchange.Redis.ConfigurationOptions,CachingFramework.Redis.Contracts.ISerializer,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisProviderContext"/> class.
            </summary>
            <param name="configuration">The configuration object.</param>
            <param name="serializer">The serializer.</param>
            <param name="log">The textwriter to use for logging purposes.</param>
        </member>
        <member name="T:CachingFramework.Redis.Providers.RedisPubSubProvider">
            <summary>
            Pub/Sub provider implementation using Redis.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisPubSubProvider.#ctor(CachingFramework.Redis.Providers.RedisProviderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Providers.RedisProviderBase" /> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisPubSubProvider.Subscribe``1(System.String,System.Action{System.String,``0})">
            <summary>
            Subscribes to a specified channel for a speficied type.
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="channel">The channel name.</param>
            <param name="action">The action where the first parameter is the channel name and the second is the object message.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisPubSubProvider.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribes to a specified channel for a speficied type.
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="channel">The channel name.</param>
            <param name="action">The action where the first parameter is the object message.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisPubSubProvider.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from the specified channel.
            </summary>
            <param name="channel">The channel name.</param>
        </member>
        <member name="M:CachingFramework.Redis.Providers.RedisPubSubProvider.Publish``1(System.String,``0)">
            <summary>
            Publishes an object to the specified channel.
            </summary>
            <typeparam name="T">The type of item to publish</typeparam>
            <param name="channel">The channel name.</param>
            <param name="item">The object message to send.</param>
        </member>
        <member name="T:CachingFramework.Redis.RedisContext">
            <summary>
            Context class containing the public APIs.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisContext.DefaultSerializer">
            <summary>
            Gets or sets the default serializer to use when creating a new RedisContext. 
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.RedisContext._cacheProvider">
            <summary>
            The cache provider
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.RedisContext._collectionProvider">
            <summary>
            The collection provider
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.RedisContext._geoProvider">
            <summary>
            The geo spatial provider
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.RedisContext._pubsubProvider">
            <summary>
            The pub/sub provider
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class using Redis in localhost server default port 6379, and using the default Serializer.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class given the cache engine type and its configuration string, and using the default Serializer.
            </summary>
            <param name="configuration">The configuration string.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(StackExchange.Redis.ConfigurationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class given the cache engine type and its configuration string, and using the default Serializer.
            </summary>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(System.String,CachingFramework.Redis.Contracts.ISerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class.
            </summary>
            <param name="configuration">The configuration string.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(StackExchange.Redis.ConfigurationOptions,CachingFramework.Redis.Contracts.ISerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class.
            </summary>
            <param name="configuration">The configuration object.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(StackExchange.Redis.IConnectionMultiplexer,CachingFramework.Redis.Contracts.ISerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class injecting the connection multiplexer and serializer to use.
            </summary>
            <param name="connection">The connection multiplexer to use.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(StackExchange.Redis.IConnectionMultiplexer)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext"/> class injecting the connection multiplexer to use using the default serializer.
            </summary>
            <param name="connection">The connection multiplexer to use.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(System.String,CachingFramework.Redis.Contracts.ISerializer,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class.
            </summary>
            <param name="configuration">The configuration string.</param>
            <param name="serializer">The serializer.</param>
            <param name="log">The textwriter to use for logging purposes.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.#ctor(StackExchange.Redis.ConfigurationOptions,CachingFramework.Redis.Contracts.ISerializer,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisContext" /> class.
            </summary>
            <param name="configuration">The configuration object.</param>
            <param name="serializer">The serializer.</param>
            <param name="log">The textwriter to use for logging purposes.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisContext.Cache">
            <summary>
            Gets the cache API.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisContext.Collections">
            <summary>
            Gets the collection API.
            </summary>
            <value>The collections.</value>
        </member>
        <member name="P:CachingFramework.Redis.RedisContext.GeoSpatial">
            <summary>
            Gets the geo spatial API.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisContext.PubSub">
            <summary>
            Gets the pub sub API.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisContext.KeyEvents">
            <summary>
            Access the key events API.
            </summary>
            <value>The key events.</value>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.GetConnectionMultiplexer">
            <summary>
            Gets the StackExchange.Redis's connection multiplexer.
            Use this if you want to directly access the SE.Redis API.
            </summary>
            <returns>IConnectionMultiplexer.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.GetSerializer">
            <summary>
            Gets the serializer for this context.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisContext.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisBaseObject">
            <summary>
            Base class for Managed collections using Redis types
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.RedisObjects.RedisBaseObject.RedisContext">
            <summary>
            The serializer to use
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBaseObject.Serializer">
            <summary>
            The serializer to use
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBaseObject.Connection">
            <summary>
            The connection multiplexer
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBaseObject.RedisKey">
            <summary>
            Gets the redis key for this object
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBaseObject.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisBaseObject"/> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBaseObject.GetRedisDb">
            <summary>
            Gets the redis database.
            </summary>
            <returns>IDatabase.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBaseObject.Serialize``1(``0)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBaseObject.Deserialize``1(StackExchange.Redis.RedisValue)">
            <summary>
            Deserializes the specified redis value. 
            Returns the type default if the value RedisValue IsNull.
            </summary>
            <param name="serialized">The serialized string.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBaseObject.TimeToLive">
            <summary>
            Gets or sets the time to live.
            Null means persistent.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBaseObject.Expiration">
            <summary>
            Gets or sets the Expiration as a local datetime.
            Null means the key is persistent.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBaseObject.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBaseObject.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBaseObject.ClearAsync">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisBitmap" /> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.SetBit(System.Int64,System.Byte)">
            <summary>
            Sets or clears the bit at offset. The bit is either set or cleared depending on bit parameter.
            When key does not exist, a new string value is created. The string is grown to make sure it can hold a bit at offset.
            </summary>
            <param name="offset">The zero-based offset.</param>
            <param name="bit">The bit value (any number > 0 is considered as true).</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.GetBit(System.Int64)">
            <summary>
            Returns the bit value at offset in the string value stored at key. 
            When offset is beyond the string length, 0 is returned.
            </summary>
            <param name="offset">The zero-based offset.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.BitPosition(System.Byte,System.Int64,System.Int64)">
            <summary>
            Return the position of the first bit set to 1 or 0 in the given byte range.  
            An start and end may be specified; these are in bytes, not bits; start and end can contain negative 
            values in order to index bytes starting from the end of the string.
            </summary>
            <param name="bit">The bit to search</param>
            <param name="start">The start position (in bytes)</param>
            <param name="stop">The end position (in bytes)</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.Contains(System.Byte,System.Int64,System.Int64)">
            <summary>
            Determines whether the bitmap contains the given bit within the byte(s) specified on the start/stop range.
            </summary>
            <param name="bit">The bit to check (any number > 0 is considered as true)</param>
            <param name="start">The start position (in bytes)</param>
            <param name="stop">The end position (in bytes)</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.BitfieldGet``1(CachingFramework.Redis.Contracts.BitfieldType,System.Int64,System.Boolean)">
            <summary>
            Gets the specified integer field of arbitrary size from the bitmap
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="offset">The offset (bit or ordinal).</param>
            <param name="offsetIsOrdinal">if set to <c>true</c>, offset is ordinal, so offset=N means the N-th counter of the fieldType size.
            If set to <c>false</c>, offset is the bit position, so offset=N means the N-th bit</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.BitfieldSet``1(CachingFramework.Redis.Contracts.BitfieldType,System.Int64,``0,System.Boolean,CachingFramework.Redis.Contracts.OverflowType)">
            <summary>
            Sets the specified integer field of arbitrary size in the bitmap
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="offset">The offset (bit or ordinal).</param>
            <param name="value">The value to set.</param>
            <param name="offsetIsOrdinal">if set to <c>true</c>, offset is ordinal, so offset=N means the N-th counter of the fieldType size.
            If set to <c>false</c>, offset is the bit position, so offset=N means the N-th bit</param>
            <param name="overflowType">Overflow handling type.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.BitfieldIncrementBy``1(CachingFramework.Redis.Contracts.BitfieldType,System.Int64,``0,System.Boolean,CachingFramework.Redis.Contracts.OverflowType)">
            <summary>
            Increment the specified integer counter.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="offset">The offset (bit or ordinal).</param>
            <param name="increment">The value to increment.</param>
            <param name="offsetIsOrdinal">if set to <c>true</c>, offset is ordinal, so offset=N means the N-th counter of the fieldType size.
            If set to <c>false</c>, offset is the bit position, so offset=N means the N-th bit</param>
            <param name="overflowType">Overflow handling.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.Add(System.Byte)">
            <summary>
            Appends an *entire byte* (8 bits) at the end of the bitmap, set to the given value.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the entire bitmap to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBitmap.Count">
            <summary>
            Count the number of set bits (population counting) in the bitmap.  
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.CachingFramework#Redis#Contracts#RedisObjects#IRedisBitmap#Count(System.Int64,System.Int64)">
            <summary>
            Count the number of set bits (population counting) in the given byte range.  
            It is possible to specify the counting operation only in an interval passing the additional arguments start and end.  
            </summary>
            <param name="start">The start position (in bytes)</param>
            <param name="end">The end position (in bytes)</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisBitmap.System#Collections#Generic#ICollection{System#Byte}#Count">
            <summary>
            Count the number of set bits (population counting) in the bitmap.  
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Determines whether the bitmap contains the given bit.
            </summary>
            <param name="bit">The bit to check</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.Remove(System.Byte)">
            <summary>
            Inverts the first occurence of the specified bit in the bitmap.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisBitmap.BitCount(System.Int64,System.Int64)">
            <summary>
            Count the number of set bits in the bitmap.  
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisDictionary`2">
            <summary>
            Managed dictionary using a Redis Hash
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String,CachingFramework.Redis.Contracts.Providers.ICacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisBaseObject" /> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
            <param name="cacheProvider">The cache provider.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds multiple elements to the dictionary.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.AddAsync(`0,`1,System.String[])">
            <summary>
            Adds a single element to the dictionary related to the given tag(s).
            </summary>
            <param name="key">The redis key.</param>
            <param name="value">The value.</param>
            <param name="tags">The tags to relate.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds multiple elements to the dictionary.
            </summary>
            <param name="items">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.GetCountAsync">
            <summary>
            Returns the number of elements in the hash.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.AddAsync(`0,`1)">
            <summary>
            Adds a single element to the dictionary.
            </summary>
            <param name="key">The redis key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.ContainsKeyAsync(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.ContainsAsync(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.RemoveAsync(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.GetValue(`0)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.GetValueAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The values.</value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The keys.</value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element at the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire dictionary to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the hash.
            </summary>
            <value>The count.</value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TK,TV}}#Count">
            <summary>
            Gets the number of elements contained in the hash.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.IncrementBy(`0,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.IncrementByAsync(`0,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.IncrementByFloat(`0,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisDictionary`2.IncrementByFloatAsync(`0,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisLexicographicSet">
            <summary>
            Managed string collection using a Redis Sorted Set with lexicographical order
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisLexicographicSet" /> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of string values to the set.
            </summary>
            <param name="collection">The collection of string to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.AutoComplete(System.String,System.Int64)">
            <summary>
            Returns the strings that starts with the specified partial string.
            </summary>
            <param name="partial">The partial string to match.</param>
            <param name="take">The take number for result pagination.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.Match(System.String)">
            <summary>
            Iterates over the strings that matches the specified glob-style pattern.
            </summary>
            <param name="pattern">The glob-style pattern.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.Add(System.String)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.Contains(System.String)">
            <summary>
            Determines whether the set contains a specific value.
            </summary>
            <param name="item">The string to locate.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire sorted set to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.Count">
            <summary>
            Gets the number of elements contained in the collection/>.
            </summary>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.System#Collections#Generic#ICollection{System#String}#Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The string to remove.</param>
            <returns>true if <paramref name="item" /> was successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> is not found.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisLexicographicSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisList`1">
            <summary>
            Managed list using a Redis List
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisBaseObject" /> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of values to the end of the list.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PushFirst(`0)">
            <summary>
            Adds a new item to the list at the start of the list.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PushLast(`0)">
            <summary>
            Adds a new item to the list at the end of the list (has the same effect as Add method).
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PopFirst">
            <summary>
            Removes the item at the start of the list and returns the item removed.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PopLast">
            <summary>
            Removes the item at the end of the list and returns the item removed.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.GetRange(System.Int64,System.Int64)">
            <summary>
            Returns the specified elements of the list stored at key. The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on.
            These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, -1 is the last element of the list, -2 the penultimate, and so on.
            
            </summary>
            <param name="start">The start.</param>
            <param name="stop">The stop.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.FirstOrDefault">
            <summary>
            Returns the first element of the list, returns the type default if the list contains no elements.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.LastOrDefault">
            <summary>
            Returns the last element of the list, returns the type default if the list contains no elements.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Insert(System.Int64,`0)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.RemoveAt(System.Int64)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Trim(System.Int64,System.Int64)">
            <summary>
            Trim an existing list so that it will contain only the specified range of elements specified. 
            Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on.
            Start and end can also be negative numbers indicating offsets from the end of the list, where -1 is the last element of the list, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Remove(`0,System.Int64)">
            <summary>
            Removes the specified occurrences of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="count">if count > 0: Remove a quantity of elements equal to value moving from head to tail. if count &lt; 0: Remove elements equal to value moving from tail to head. count = 0: Remove all elements equal to value.</param>
            <returns>true if at least one element was successfully removed from the list.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of values to the end of the list.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PushFirstAsync(`0)">
            <summary>
            Adds a new item to the list at the start of the list.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PushLastAsync(`0)">
            <summary>
            Adds a new item to the list at the end of the list (has the same effect as Add method).
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PopFirstAsync">
            <summary>
            Removes the item at the start of the list and returns the item removed.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.PopLastAsync">
            <summary>
            Removes the item at the end of the list and returns the item removed.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.GetRangeAsync(System.Int64,System.Int64)">
            <summary>
            Returns the specified elements of the list stored at key. The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on.
            These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, -1 is the last element of the list, -2 the penultimate, and so on.
            
            </summary>
            <param name="start">The start.</param>
            <param name="stop">The stop.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.InsertAsync(System.Int64,`0)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.RemoveAtAsync(System.Int64)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.TrimAsync(System.Int64,System.Int64)">
            <summary>
            Trim an existing list so that it will contain only the specified range of elements specified. 
            Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on.
            Start and end can also be negative numbers indicating offsets from the end of the list, where -1 is the last element of the list, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.RemoveAsync(`0,System.Int64)">
            <summary>
            Removes the specified occurrences of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="count">if count > 0: Remove a quantity of elements equal to value moving from head to tail. if count &lt; 0: Remove elements equal to value moving from tail to head. count = 0: Remove all elements equal to value.</param>
            <returns>true if at least one element was successfully removed from the list.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.AddAsync(`0)">
            <summary>
            Adds an item to the collection (has the same effect as AddLast method).
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.ContainsAsync(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.IndexOfAsync(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisList`1.Item(System.Int64)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>        
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Add(`0)">
            <summary>
            Adds an item to the collection (has the same effect as AddLast method).
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisList`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.Remove(`0)">
            <summary>
            Removes the first occurrences of a specific object from the list, moving from head to tail.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if the element was successfully removed from the list.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisList`1.GetTempKey">
            <summary>
            Gets a temporary key.
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisSet`1">
            <summary>
            Managed collection using a Redis Sorted Set
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String,CachingFramework.Redis.Contracts.Providers.ICacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisBaseObject" /> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
            <param name="cacheProvider">The cache provider.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items.
            </summary>
            <param name="collection">The items to add</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.Pop">
            <summary>
            Returns and remove a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.GetRandomMember">
            <summary>
            Returns a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple elements to the set.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.GetCountAsync">
            <summary>
            Returns the number of elements in the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.PopAsync">
            <summary>
            Returns and remove a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.GetRandomMemberAsync">
            <summary>
            Returns a random value from the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.AddAsync(`0,System.String[])">
            <summary>
            Adds an item related to one or more tags.
            </summary>
            <param name="item">The item.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.AddAsync(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.ContainsAsync(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.RemoveAsync(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire set to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisSet`1.Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
            <value>The count.</value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisSet`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisSortedSet`1">
            <summary>
            Managed collection using a Redis Sorted Set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String,CachingFramework.Redis.Contracts.Providers.ICacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.RedisObjects.RedisBaseObject" /> class.
            </summary>
            <param name="redisContext">The redis context.</param>
            <param name="redisKey">The redis key.</param>
            <param name="cacheProvider">The cache provider.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.Add(CachingFramework.Redis.Contracts.SortedMember{`0},CachingFramework.Redis.Contracts.When)">
            <summary>
            Adds the specified member with the specified score to the sorted set stored at key. 
            If key does not exist, a new sorted set with the specified member as sole member is created, like if the sorted set was empty. 
            </summary>
            <param name="member">The sorted member to add.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.Add(System.Double,`0,CachingFramework.Redis.Contracts.When)">
            <summary>
            Adds the specified member with the specified score to the sorted set stored at key. 
            If key does not exist, a new sorted set with the specified member as sole member is created, like if the sorted set was empty. 
            </summary>
            <param name="item">The item to add.</param>
            <param name="score">The item score.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.AddRange(System.Collections.Generic.IEnumerable{CachingFramework.Redis.Contracts.SortedMember{`0}},CachingFramework.Redis.Contracts.When)">
            <summary>
            Adds all the specified members with the specified scores to the sorted set stored at key. 
            If key does not exist, a new sorted set with the specified members as sole members is created, like if the sorted set was empty. 
            </summary>
            <param name="members">The members to add.</param>
            <param name="when">Indicates when this operation should be performed.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.Count">
            <summary>
            Returns the number of elements in the sorted set.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.CountByScore(System.Double,System.Double)">
            <summary>
            Returns the number of elements in the sorted set at key with a score between min and max.
            </summary>
            <param name="min">The minimum score to consider (inclusive).</param>
            <param name="max">The maximum score to consider (inclusive).</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.GetRangeByScore(System.Double,System.Double,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Returns all the elements in the sorted set at key with a score between min and max (inclusive). 
            </summary>
            <param name="min">The minimum score to consider.</param>
            <param name="max">The maximum score to consider.</param>
            <param name="descending">if set to <c>true</c> the elements are considered to be ordered from high to low scores.</param>
            <param name="skip">The skip number for result pagination.</param>
            <param name="take">The take number for result pagination.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.GetRangeByRank(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the lowest to the highest score by default.
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="descending">if set to <c>true</c> the elements are considered to be ordered from high to low scores.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.RemoveRangeByScore(System.Double,System.Double)">
            <summary>
            Removes all elements in the sorted set with a score between min and max (inclusive).
            </summary>
            <param name="min">The minimum score to consider.</param>
            <param name="max">The maximum score to consider.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.RemoveRangeByRank(System.Int64,System.Int64)">
            <summary>
            Removes all elements in the sorted set stored with rank between start and stop. 
            Both start and stop are zero-based indexes with 0 being the element with the lowest score. 
            These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. 
            </summary>
            <param name="start">The start zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
            <param name="stop">The stop zero-based index (can be negative number indicating offset from the end of the sorted set).</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.IncrementScore(`0,System.Double)">
            <summary>
            Increments the score of member in the sorted by the given value. 
            If member does not exist in the sorted set, it is added with increment as its score (as if its previous score was 0.0). 
            If key does not exist, a new sorted set with the specified member as its sole member is created.
            </summary>
            <param name="item">The item to increment its score.</param>
            <param name="value">The increment value.</param>
            <returns>The new score of the member</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.RankOf(`0,System.Boolean)">
            <summary>
            Returns the rank of member in the sorted set, with the scores ordered from low to high by default. 
            The rank (or index) is zero-based.
            </summary>
            <param name="item">The item.</param>
            <param name="descending">if set to <c>true</c> the elements are considered to be ordered from high to low scores.</param>
            <returns>The rank of the item in the sorted set, or NULL when the key or the member does not exists</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.ScoreOf(`0)">
            <summary>
            Returns the score of member in the sorted set at key.
            </summary>
            <param name="item">The item.</param>
            <returns>The score of the item in the sorted set, or NULL when the key or the member does not exists</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sorted set collection.
            The returned items will NOT be sorted by score.
            Use GetRangeByScore if you need an ordered iterator. 
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sorted set collection.
            The returned items will NOT be sorted by score.
            Use GetRangeByScore if you need an ordered iterator. 
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.Add(`0)">
            <summary>
            Adds the specified item with score 0, to the sorted set. 
            If key does not exist, a new sorted set with the specified member as sole member is created, like if the sorted set was empty. 
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.Contains(`0)">
            <summary>
            Determines whether the sorted set contains a specific item.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>true if <paramref name="item" /> is found; otherwise, false.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire sorted set to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisSortedSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="T:CachingFramework.Redis.RedisObjects.RedisString">
            <summary>
            Managed string using a Redis string.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.#ctor(CachingFramework.Redis.Providers.RedisProviderContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.Append(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.AppendAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.Set(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.SetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.Set(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.SetAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.Set(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.SetAsync(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetSet(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetSetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetSet(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetSetAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetSet(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetSetAsync(System.Double)">
            <inheritdoc />
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisString.Item(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.ToString">
            <summary>
            Returns the string that represents this instance.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.ToStringAsync">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.SetRange(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.SetRangeAsync(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetRange(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.GetRangeAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:CachingFramework.Redis.RedisObjects.RedisString.Length">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.IncrementBy(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.IncrementByAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.IncrementByFloat(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.IncrementByFloatAsync(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.AsInteger(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.AsIntegerAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.AsFloat(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:CachingFramework.Redis.RedisObjects.RedisString.AsFloatAsync(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:CachingFramework.Redis.Serializers.JsonSerializer">
            <summary>
            Class JsonSerializer.
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Serializers.JsonSerializer._settings">
            <summary>
            The _settings
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Serializers.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.JsonSerializer.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Serializers.JsonSerializer"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.JsonSerializer.Serialize``1(``0)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.JsonSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="T:CachingFramework.Redis.Serializers.RawSerializer">
            <summary>
            Primitive types, strings and datetimes are encoded as a UTF-8 string.
            Any other types are Binary Serialized with GZIP compression.
            Objects to serialize must be marked with [Serializable] attribute.
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Serializers.RawSerializer.DateFormat">
            <summary>
            The date format
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Serializers.RawSerializer.FloatFormat">
            <summary>
            The float format
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Serializers.RawSerializer._serialDict">
            <summary>
            Dictionary of serializer methods per type
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Serializers.RawSerializer._deserialDict">
            <summary>
            Dictionary of deserializer methods per type
            </summary>
        </member>
        <member name="F:CachingFramework.Redis.Serializers.RawSerializer.Culture">
            <summary>
            The default cultureinfo to use in the ToString methods.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.RawSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CachingFramework.Redis.Serializers.RawSerializer"/> class.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.RawSerializer.SetSerializerFor``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})">
            <summary>
            Override the serialization/deserialization method for a given type.
            </summary>
            <param name="serializeMethod">The serialize method.</param>
            <param name="deserializeMethod">The deserialize method.</param>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.RawSerializer.Serialize``1(``0)">
            <summary>
            Serializes the specified value.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.RawSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified value.
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.RawSerializer.GetBytes(System.String)">
            <summary>
            Get a byte array to encode the given string in UTF8
            </summary>
        </member>
        <member name="M:CachingFramework.Redis.Serializers.RawSerializer.GetString(System.Byte[])">
            <summary>
            Get a string from the UTF8 encoded byte array
            </summary>
        </member>
        <member name="T:CachingFramework.Redis.TaskExtensions">
            <summary>
            Task Extensions.
            </summary>
            <remarks>
            http://stackoverflow.com/a/13494570/122195
            </remarks>
        </member>
        <member name="M:CachingFramework.Redis.TaskExtensions.ForAwait(System.Threading.Tasks.Task)">
            <summary>
            Configure a task to be awaited without re-entering to the request context (for performance).
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:CachingFramework.Redis.TaskExtensions.ForAwait``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Configure a task to be awaited without re-entering to the request context (for performance).
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:CachingFramework.Redis.TaskExtensions.Forget(System.Threading.Tasks.Task)">
            <summary>
            Forgets the execution of a task. Useful to avoid compiler warnings.
            </summary>
            <param name="task">The task.</param>
        </member>
    </members>
</doc>
